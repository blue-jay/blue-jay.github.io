<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Libraries on Blue Jay | Go Toolkit for the Web</title>
    <link>https://blue-jay.github.io/library/</link>
    <description>Recent content in Libraries on Blue Jay | Go Toolkit for the Web</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://blue-jay.github.io/library/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Library</title>
      <link>https://blue-jay.github.io/library/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blue-jay.github.io/library/</guid>
      <description>

&lt;h2 id=&#34;basic-usage&#34;&gt;Basic Usage&lt;/h2&gt;

&lt;p&gt;If you look through the &lt;a href=&#34;https://github.com/blue-jay/core&#34;&gt;&lt;strong&gt;Core&lt;/strong&gt;&lt;/a&gt; library,
you&amp;rsquo;ll see packages that provide
different functionality. These packages are designed to be shared and used
through the application. Since Blueprint is a web application, some of the
packages must be thread-safe to ensure they won&amp;rsquo;t throw any errors if they are
accessed at the same time by two separate threads.&lt;/p&gt;

&lt;p&gt;As you create your own packages, you can store them in the &lt;strong&gt;blueprint/lib&lt;/strong&gt;
folder to keep them organized and separate.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a good idea to keep them light on dependencies so you can reuse them again
in later projects. Packages that are too tightly-coupled require time to rework
so you might as well do it right from the start.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at the &lt;strong&gt;email&lt;/strong&gt; package in sections. The first of the
three sections is the package declaration and import section. Notice how the
only packages the &lt;strong&gt;email&lt;/strong&gt; package uses are part of the standard library. This
is a good indicator that the package could be moved to a different project
without rewriting.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/blue-jay/core/blob/master/email/email.go&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Package email provides email sending via SMTP.
package email

import (
    &amp;quot;encoding/base64&amp;quot;
    &amp;quot;fmt&amp;quot;
    &amp;quot;net/smtp&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Info struct holds the details for the SMTP server and it should be
added to the &lt;strong&gt;Info&lt;/strong&gt; struct of the &lt;strong&gt;lib/env&lt;/strong&gt; package
and then parsed from the env.json file. See the &lt;a href=&#34;https://blue-jay.github.io/configuration/&#34;&gt;Configuration&lt;/a&gt;
section for more information about adding to env.json.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Info holds the details for the SMTP server.
type Info struct {
    Username string
    Password string
    Hostname string
    Port     int
    From     string
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The final section of the &lt;strong&gt;email&lt;/strong&gt; package sends an
email using the configuration settings. You&amp;rsquo;ll notice the function is a
struct method which makes it really easy to use from the &lt;strong&gt;flight&lt;/strong&gt; package.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Send an email.
func (c Info) Send(to, subject, body string) error {
    auth := smtp.PlainAuth(&amp;quot;&amp;quot;, c.Username, c.Password, c.Hostname)

    // Create the header
    header := make(map[string]string)
    header[&amp;quot;From&amp;quot;] = c.From
    header[&amp;quot;To&amp;quot;] = to
    header[&amp;quot;Subject&amp;quot;] = subject
    header[&amp;quot;MIME-Version&amp;quot;] = &amp;quot;1.0&amp;quot;
    header[&amp;quot;Content-Type&amp;quot;] = `text/plain; charset=&amp;quot;utf-8&amp;quot;`
    header[&amp;quot;Content-Transfer-Encoding&amp;quot;] = &amp;quot;base64&amp;quot;

    // Set the message
    message := &amp;quot;&amp;quot;
    for k, v := range header {
        message += fmt.Sprintf(&amp;quot;%s: %s\r\n&amp;quot;, k, v)
    }
    message += &amp;quot;\r\n&amp;quot; + base64.StdEncoding.EncodeToString([]byte(body))

    // Send the email
    err := smtp.SendMail(
        fmt.Sprintf(&amp;quot;%s:%d&amp;quot;, c.Hostname, c.Port),
        auth,
        c.From,
        []string{to},
        []byte(message),
    )

    return err
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To use in a controller, you would get the context from the &lt;strong&gt;flight&lt;/strong&gt; package
and then from the &lt;strong&gt;Config&lt;/strong&gt; variable, you could access the &lt;strong&gt;email&lt;/strong&gt; struct and then
the &lt;code&gt;Send()&lt;/code&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Index sends an email.
func Index(w http.ResponseWriter, r *http.Request) {
    c := flight.Context(w, r)

    err := c.Config.Email.Send(&amp;quot;This is the subject&amp;quot;, &amp;quot;This is the body!&amp;quot;)
    if err != nil {
        c.FlashError(err)
        return
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;code-generation&#34;&gt;Code Generation&lt;/h2&gt;

&lt;p&gt;A new &lt;strong&gt;lib&lt;/strong&gt; package can be generated using this command: &lt;code&gt;jay generate lib/default package:value&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>