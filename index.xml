<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blue Jay</title>
    <link>http://blue-jay.github.io/</link>
    <description>Recent content on Blue Jay</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 08 Mar 2016 21:07:13 +0100</lastBuildDate>
    <atom:link href="http://blue-jay.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Toolkit Overview</title>
      <link>http://blue-jay.github.io/</link>
      <pubDate>Tue, 08 Mar 2016 21:07:13 +0100</pubDate>
      
      <guid>http://blue-jay.github.io/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://goreportcard.com/report/github.com/blue-jay/blueprint&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/blue-jay/blueprint&#34; alt=&#34;Go Report Card&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://godoc.org/github.com/blue-jay/blueprint&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/blue-jay/blueprint?status.svg&#34; alt=&#34;GoDoc&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Blue Jay is a web toolkit for &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;. It&amp;rsquo;s a collection of command-line tools and a web blueprint that allows you to easily structure your web application. There is no rigid framework to which you have to conform.&lt;/p&gt;

&lt;p&gt;There are a few components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/blue-jay/blueprint&#34;&gt;&lt;strong&gt;Blueprint&lt;/strong&gt;&lt;/a&gt; is a model-view-controller (MVC) style web skeleton.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/blue-jay/jay&#34;&gt;&lt;strong&gt;Jay&lt;/strong&gt;&lt;/a&gt; is a command line tool with modules for find/replace, database migrations, and code generation.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;why-blue-jay&#34;&gt;Why Blue Jay?&lt;/h2&gt;

&lt;h3 id=&#34;fun-answer&#34;&gt;Fun Answer&lt;/h3&gt;

&lt;p&gt;After 300 stars on GitHub, I realized people really liked the boilerplate
Model-View-Controller (MVC) web application in Go called
&lt;a href=&#34;https://github.com/josephspurrier/gowebapp&#34;&gt;gowebapp&lt;/a&gt; so I gave it a better
name and improved the documentation.&lt;/p&gt;

&lt;h3 id=&#34;real-answer&#34;&gt;Real Answer&lt;/h3&gt;

&lt;p&gt;Go is a blast to code in and it&amp;rsquo;s great being part of a helpful community.
Blue Jay provides a quickstart for developers with a lean web skeleton called
&lt;strong&gt;Blueprint&lt;/strong&gt; that demonstrates how to structure a web application with sample
code.&lt;/p&gt;

&lt;p&gt;One of the things you&amp;rsquo;ll notice while using Blueprint is how to abstract out
external packages to make it easy to swap out components. Ultimately, you should
be able to write code once and use it in all of your other projects. The &lt;strong&gt;lib&lt;/strong&gt;
folder is a great place for all these packages with very few dependencies.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll also notice certain packages need to be thread-safe when building web applications.
An example is the &lt;strong&gt;lib/view&lt;/strong&gt; package which provides thread-safe template caching.&lt;/p&gt;

&lt;p&gt;The other reason for Blue Jay is the command-line tool, &lt;strong&gt;jay&lt;/strong&gt;, which provides an easy way
to find/replace in a project when refactoring, migrate your database forwards or backwards, and
generate a file or sets or files using the Go &lt;a href=&#34;https://golang.org/pkg/html/template/&#34;&gt;html/template&lt;/a&gt;
package. Code generation can help you build faster and more efficiently with less mistakes.&lt;/p&gt;

&lt;h2 id=&#34;why-go&#34;&gt;Why Go?&lt;/h2&gt;

&lt;p&gt;One of the big draws to Go is the rich standard library. The standard library includes a web server,
web-safe templating, and
many other tools necessary to build a web application. Any features missing from the standard library are
written by other Go developers who are happy to contribute to the thriving community.&lt;/p&gt;

&lt;p&gt;Go allows you to write code that compiles to the majority of the architectures we use today so all your
code is pretty much portable. Go excels when you want to write command line apps instead of just scripts,
but that&amp;rsquo;s not the language&amp;rsquo;s only niche.
The designers of Go wanted to build a language that solved problems between the Google development teams.
It&amp;rsquo;s a modern language that allows you to easily multi-thread your applications.&lt;/p&gt;

&lt;h2 id=&#34;high-level&#34;&gt;High Level&lt;/h2&gt;

&lt;p&gt;Blueprint is a complete web application with built-in web server.
It requires MySQL so you&amp;rsquo;ll need to set up your own instance of the database.
The application has a public home page, authenticated home page, login page, register page,
about page, and a simple notepad to demonstrate GET, POST, UPDATE, and DELETE operations.&lt;/p&gt;

&lt;p&gt;The entrypoint for the web app is &lt;strong&gt;blueprint.go&lt;/strong&gt;. The file calls the &lt;strong&gt;bootstrap&lt;/strong&gt; package
which loads the application settings, creates the session store, connects to the database,
sets up the view, loads the routes, attaches the middleware, and starts the web server.&lt;/p&gt;

&lt;p&gt;The front end is built using Bootstrap with a few small changes to fonts and spacing. The flash
messages are customized so they show up at the bottom right of the screen.&lt;/p&gt;

&lt;p&gt;All of the error and warning messages should display to the
user or in the console. Informational messages are displayed to the user via
flash messages that disappear after 4 seconds.&lt;/p&gt;

&lt;h2 id=&#34;quick-start-with-mysql&#34;&gt;Quick Start with MySQL&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;To download, run the following command: &lt;code&gt;go get github.com/blue-ray/blueprint&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start a MySQL instance and import &lt;strong&gt;database/quickstart.sql&lt;/strong&gt; to create the database and tables.&lt;/li&gt;
&lt;li&gt;Make a copy of env.json.example and name it: &lt;strong&gt;env.json&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Edit the &lt;strong&gt;Database&lt;/strong&gt; section in &lt;strong&gt;config/config.json&lt;/strong&gt; so the connection information matches your MySQL instance.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;go run&lt;/code&gt; from the root of the project directory.&lt;/li&gt;
&lt;li&gt;Open your web browser to &lt;a href=&#34;http://localhost&#34;&gt;http://localhost&lt;/a&gt; and you should see the welcome page.&lt;/li&gt;
&lt;li&gt;Navigate to the register page at &lt;a href=&#34;http://localhost/register&#34;&gt;http://localhost/register&lt;/a&gt; and create a new user.&lt;/li&gt;
&lt;li&gt;You can now login at &lt;a href=&#34;http://localhost/login&#34;&gt;http://localhost/login&lt;/a&gt; and try the Notepad app.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;structure&#34;&gt;Structure&lt;/h2&gt;

&lt;p&gt;The project is organized into the following root folders:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;bootstrap	- initial set up of the application
controller	- page logic and routes
database	- migration scripts
generate	- templates used with code generation command line tool
lib			- packages accessible throughout the application
model		- database structs representing tables and queries
static		- statically served files like CSS and JSS
template	- HTML templates parsed using the Go html/template package
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following files exist at the project root:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;blueprint.go 		- entrypoint for the application
env.json.example 	- variables for the application
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;external-packages&#34;&gt;External Packages&lt;/h2&gt;

&lt;p&gt;There are a few external packages that must be retrieved using &lt;code&gt;go get&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;github.com/gorilla/context				- registry for global request variables
github.com/gorilla/sessions				- cookie and filesystem sessions
github.com/go-sql-driver/mysql 			- MySQL driver
github.com/jmoiron/sqlx 				- MySQL general purpose extensions
github.com/josephspurrier/csrfbanana 	- CSRF protection for gorilla sessions
github.com/julienschmidt/httprouter 	- high performance HTTP request router
github.com/justinas/alice				- middleware chaining
golang.org/x/crypto/bcrypt 				- password hashing algorithm
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;screenshots&#34;&gt;Screenshots&lt;/h2&gt;

&lt;p&gt;Public Home:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/2394539/11319464/e2cd0eac-9045-11e5-9b24-5e480240cd69.jpg&#34; alt=&#34;Image of Public Home&#34; /&gt;&lt;/p&gt;

&lt;p&gt;About:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/2394539/11319462/e2c4d2d2-9045-11e5-805f-8b40598c92c3.jpg&#34; alt=&#34;Image of About&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Register:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/2394539/11319466/e2d03500-9045-11e5-9c8e-c28fe663ed0f.jpg&#34; alt=&#34;Image of Register&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Login:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/2394539/11319463/e2cd1a00-9045-11e5-8b8e-68030d870cbe.jpg&#34; alt=&#34;Image of Login&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Authenticated Home:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/2394539/14809208/75f340d2-0b59-11e6-8d2a-cd26ee872281.PNG&#34; alt=&#34;Image of Auth Home&#34; /&gt;&lt;/p&gt;

&lt;p&gt;View Notes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/2394539/14809205/75f08432-0b59-11e6-8737-84ee796bd82e.PNG&#34; alt=&#34;Image of Notepad View&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Add Note:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/2394539/14809207/75f338f8-0b59-11e6-9719-61355957996c.PNG&#34; alt=&#34;Image of Notepad Add&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Edit Note:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/2394539/14809206/75f33970-0b59-11e6-8acf-b3d533477aac.PNG&#34; alt=&#34;Image of Notepad Edit&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;feedback&#34;&gt;Feedback&lt;/h2&gt;

&lt;p&gt;All feedback is welcome. Let me know if you have any suggestions, questions, or criticisms.
If something is not idiomatic to Go, please let me know know so we can make it better.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>http://blue-jay.github.io/configuration/</link>
      <pubDate>Tue, 08 Mar 2016 21:07:13 +0100</pubDate>
      
      <guid>http://blue-jay.github.io/configuration/</guid>
      <description>

&lt;h2 id=&#34;basic-usage&#34;&gt;Basic Usage&lt;/h2&gt;

&lt;p&gt;Throughout this documentation, keep in mind everything in Blueprint is configurable.
You are not using a framework so you don&amp;rsquo;t have to follow rules. You don&amp;rsquo;t need to
use any of the components with Blueprint, but it does give you a nice foundation to
start from. If you want to use YAML instead of JSON, it&amp;rsquo;s recommended to create a wrapper
library in the &lt;strong&gt;lib&lt;/strong&gt; folder and then load your env.yaml file via the &lt;strong&gt;bootstrap&lt;/strong&gt;
package.&lt;/p&gt;

&lt;p&gt;One of the first steps before using Blueprint is to create &lt;strong&gt;env.json&lt;/strong&gt;. You can make
a copy of &lt;strong&gt;env.json.example&lt;/strong&gt; and then name it &lt;strong&gt;env.json&lt;/strong&gt;. The &lt;strong&gt;env.json&lt;/strong&gt; file is a
good place to set variables for the application so you
don&amp;rsquo;t have to hardcode them. If you want to add any
of your own settings, you can add them to &lt;strong&gt;env.json&lt;/strong&gt; and update the &lt;strong&gt;Info&lt;/strong&gt; struct
in the &lt;strong&gt;bootstrap&lt;/strong&gt; package. Here is an example &lt;strong&gt;env.json&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
	&amp;quot;Database&amp;quot;: {
		&amp;quot;Type&amp;quot;: &amp;quot;MySQL&amp;quot;,
		&amp;quot;MySQL&amp;quot;: {
			&amp;quot;Username&amp;quot;: &amp;quot;root&amp;quot;,
			&amp;quot;Password&amp;quot;: &amp;quot;&amp;quot;,
			&amp;quot;Database&amp;quot;: &amp;quot;blueprint&amp;quot;,
			&amp;quot;Hostname&amp;quot;: &amp;quot;127.0.0.1&amp;quot;,
			&amp;quot;Port&amp;quot;: 3306,
			&amp;quot;Parameter&amp;quot;: &amp;quot;?parseTime=true&amp;quot;
		}
	},
	&amp;quot;Email&amp;quot;: {
		&amp;quot;Username&amp;quot;: &amp;quot;&amp;quot;,
		&amp;quot;Password&amp;quot;: &amp;quot;&amp;quot;,
		&amp;quot;Hostname&amp;quot;: &amp;quot;&amp;quot;,
		&amp;quot;Port&amp;quot;: 25,
		&amp;quot;From&amp;quot;: &amp;quot;&amp;quot;
	},
	&amp;quot;Server&amp;quot;: {
		&amp;quot;Hostname&amp;quot;: &amp;quot;&amp;quot;,
		&amp;quot;UseHTTP&amp;quot;: true,
		&amp;quot;UseHTTPS&amp;quot;: false,
		&amp;quot;RedirectToHTTPS&amp;quot;: false,
		&amp;quot;HTTPPort&amp;quot;: 80,
		&amp;quot;HTTPSPort&amp;quot;: 443,
		&amp;quot;CertFile&amp;quot;: &amp;quot;tls/server.crt&amp;quot;,
		&amp;quot;KeyFile&amp;quot;: &amp;quot;tls/server.key&amp;quot;
	},
	&amp;quot;Session&amp;quot;: {
		&amp;quot;SecretKey&amp;quot;: &amp;quot;@r4B?EThaSEh_drudR7P_hub=s#s2Pah&amp;quot;,
		&amp;quot;Name&amp;quot;: &amp;quot;sess&amp;quot;,
		&amp;quot;Options&amp;quot;: {
			&amp;quot;Path&amp;quot;: &amp;quot;/&amp;quot;,
			&amp;quot;Domain&amp;quot;: &amp;quot;&amp;quot;,
			&amp;quot;MaxAge&amp;quot;: 28800,
			&amp;quot;Secure&amp;quot;: false,
			&amp;quot;HttpOnly&amp;quot;: true
		}
	},
	&amp;quot;Template&amp;quot;: {
		&amp;quot;Root&amp;quot;: &amp;quot;base&amp;quot;,
		&amp;quot;Children&amp;quot;: [
			&amp;quot;partial/menu&amp;quot;,
			&amp;quot;partial/footer&amp;quot;
		]
	},
	&amp;quot;View&amp;quot;: {
		&amp;quot;BaseURI&amp;quot;: &amp;quot;/&amp;quot;,
		&amp;quot;Extension&amp;quot;: &amp;quot;tmpl&amp;quot;,
		&amp;quot;Folder&amp;quot;: &amp;quot;template&amp;quot;,
		&amp;quot;Caching&amp;quot;: true
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configuration-structure&#34;&gt;Configuration Structure&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;env.json&lt;/strong&gt; file contains the configuration for Blueprint. It removes the need
to hardcode any of these values and makes it easy to move Blueprint to another system
with a different setup.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;env.json&lt;/strong&gt; file is parsed and the result is organized in the &lt;strong&gt;Info&lt;/strong&gt; struct from the
&lt;strong&gt;bootstrap&lt;/strong&gt; package:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Info contains the application settings
type Info struct {
	Database database.Info   `json:&amp;quot;Database&amp;quot;`
	Email    email.SMTPInfo  `json:&amp;quot;Email&amp;quot;`
	Server   server.Server   `json:&amp;quot;Server&amp;quot;`
	Session  session.Session `json:&amp;quot;Session&amp;quot;`
	Template view.Template   `json:&amp;quot;Template&amp;quot;`
	View     view.View       `json:&amp;quot;View&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;strong&gt;Info&lt;/strong&gt; struct is simply a container that nests structs from packages in the &lt;strong&gt;lib&lt;/strong&gt; folder
that need variables configured. Here is a list mapping the JSON keys to structs:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Database	- Info struct in lib/database
Email		- SMTPInfo struct in lib/email
Server		- Server struct in lib/server
Session		- Session struct in lib/session
Template	- Template struct in lib/view
View		- View struct in lib/view
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;enable-https&#34;&gt;Enable HTTPS&lt;/h2&gt;

&lt;p&gt;To enable HTTPS:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Set &lt;strong&gt;UseHTTPS&lt;/strong&gt; to &lt;strong&gt;true&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Create a folder called &lt;strong&gt;tls&lt;/strong&gt; in the project root folder&lt;/li&gt;
&lt;li&gt;Place your own certificate and key files in the &lt;strong&gt;tls&lt;/strong&gt; folder&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you want to redirect HTTP to HTTPS, you can set &lt;strong&gt;RedirectToHTTPS&lt;/strong&gt; to true as well.&lt;/p&gt;

&lt;h2 id=&#34;tip-add-a-section&#34;&gt;Tip: Add a Section&lt;/h2&gt;

&lt;p&gt;To add a new key called &lt;strong&gt;Captcha&lt;/strong&gt;, you could do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new package in the &lt;strong&gt;lib&lt;/strong&gt; folder called &lt;strong&gt;captcha&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Create a struct called &lt;strong&gt;Info&lt;/strong&gt; in the &lt;strong&gt;lib/captcha&lt;/strong&gt; package&lt;/li&gt;
&lt;li&gt;Add the &lt;strong&gt;Captcha&lt;/strong&gt; key and any values to the &lt;strong&gt;env.json&lt;/strong&gt; file&lt;/li&gt;
&lt;li&gt;Add code to the &lt;strong&gt;RegisterServices()&lt;/strong&gt; function that passes the parsed config to the &lt;strong&gt;lib/captcha&lt;/strong&gt; package&lt;/li&gt;
&lt;li&gt;Add code to your controllers that references your &lt;strong&gt;lib/captcha&lt;/strong&gt; package&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;tip-remove-a-section&#34;&gt;Tip: Remove a Section&lt;/h2&gt;

&lt;p&gt;To remove the &lt;strong&gt;Email&lt;/strong&gt; key, you could do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Remove the &lt;strong&gt;Email&lt;/strong&gt; key and value from the &lt;strong&gt;env.json&lt;/strong&gt; file&lt;/li&gt;
&lt;li&gt;Remove the &lt;strong&gt;Email&lt;/strong&gt; nested struct from the &lt;strong&gt;Info&lt;/strong&gt; struct in the &lt;strong&gt;bootstrap&lt;/strong&gt; package&lt;/li&gt;
&lt;li&gt;Remove any code setting up the package from the &lt;strong&gt;RegisterServices()&lt;/strong&gt; function in the &lt;strong&gt;bootstrap&lt;/strong&gt; package&lt;/li&gt;
&lt;li&gt;Remove the &lt;strong&gt;lib/email&lt;/strong&gt; package from the filesystem&lt;/li&gt;
&lt;li&gt;Find any references to the &lt;strong&gt;lib/email&lt;/strong&gt; package in your code using the jay command line, &lt;code&gt;jay find &amp;quot;lib/email&amp;quot; &amp;quot;*.go&amp;quot;&lt;/code&gt;,
then delete the imports and referencing code&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Routing</title>
      <link>http://blue-jay.github.io/routing/</link>
      <pubDate>Tue, 08 Mar 2016 21:07:13 +0100</pubDate>
      
      <guid>http://blue-jay.github.io/routing/</guid>
      <description>

&lt;h2 id=&#34;basic-usage&#34;&gt;Basic Usage&lt;/h2&gt;

&lt;p&gt;When a user requests a page from your application, the routes determine which
page is shown. The URL is mapped to a controller function. For that reason,
the routes are stored in the controller file. The controller files are all
organized under the &lt;strong&gt;controller&lt;/strong&gt; folder.&lt;/p&gt;

&lt;h2 id=&#34;routing&#34;&gt;Routing&lt;/h2&gt;

&lt;p&gt;In the &lt;strong&gt;bootstrap&lt;/strong&gt; package, the &lt;strong&gt;RegisterServices()&lt;/strong&gt; function
calls the &lt;strong&gt;controller.LoadRoutes()&lt;/strong&gt; function.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;LoadRoutes()&lt;/strong&gt; function in the &lt;strong&gt;controller&lt;/strong&gt; package loads the routes
for each of the individual controllers:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// LoadRoutes loads the routes for each of the controllers
func LoadRoutes() {
    about.Load()
    debug.Load()
    auth.LoadRegister()
    auth.LoadLogin()
    core.LoadIndex()
    core.LoadError()
    core.LoadStatic()
    notepad.Load()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the &lt;strong&gt;Load()&lt;/strong&gt; function from the &lt;strong&gt;controller/notepad&lt;/strong&gt; package:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Load() {
    // Add middleware that disallows anonymous access
    c := router.Chain(acl.DisallowAnon)

    // Map HTTP methods and URLs to functions wrapped in the middleware chain
    router.Get(&amp;quot;/notepad&amp;quot;, Index, c...)
    router.Get(&amp;quot;/notepad/create&amp;quot;, Create, c...)
    router.Post(&amp;quot;/notepad&amp;quot;, Store, c...)
    router.Get(&amp;quot;/notepad/view/:id&amp;quot;, Show, c...)
    router.Get(&amp;quot;/notepad/edit/:id&amp;quot;, Edit, c...)
    router.Patch(&amp;quot;/notepad/edit/:id&amp;quot;, Update, c...)
    router.Delete(&amp;quot;/notepad/:id&amp;quot;, Destroy, c...)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are a few things to note here. The &lt;strong&gt;router&lt;/strong&gt; references the
&lt;strong&gt;lib/router&lt;/strong&gt; package which is a wrapper for the
&lt;a href=&#34;http://github.com/julienschmidt/httprouter&#34;&gt;julienschmidt/httprouter&lt;/a&gt; package.
The &lt;strong&gt;router.Chain()&lt;/strong&gt; function uses the
&lt;a href=&#34;http://github.com/justinas/alice&#34;&gt;justinas/alice&lt;/a&gt; package
to help with middleware chaining.&lt;/p&gt;

&lt;p&gt;This is one way to build your wrapper packages that live in the &lt;strong&gt;lib&lt;/strong&gt; folder.
If you want to use a different router, you can modify the &lt;strong&gt;lib/router&lt;/strong&gt;
package easily and will only have to change a few lines of code in your
controllers.&lt;/p&gt;

&lt;h2 id=&#34;static-assets&#34;&gt;Static Assets&lt;/h2&gt;

&lt;p&gt;You can serve your &lt;strong&gt;static&lt;/strong&gt; folder with your CSS, JavaScript, and images so
they are accessible. You would access an asset like this:
&lt;code&gt;http://example.com/static/favicon.ico&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/blue-jay/blueprint/blob/master/controller/core/static.go&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package core

import (
    &amp;quot;net/http&amp;quot;
    &amp;quot;strings&amp;quot;

    &amp;quot;github.com/blue-jay/blueprint/lib/router&amp;quot;
)

func LoadStatic() {
    // Required so the trailing slash is not redirected
    router.Instance().RedirectTrailingSlash = false

    // Serve static files, no directory browsing
    router.Get(&amp;quot;/static/*filepath&amp;quot;, Static)
}

// Static maps static files
func Static(w http.ResponseWriter, r *http.Request) {
    // Disable listing directories
    if strings.HasSuffix(r.URL.Path, &amp;quot;/&amp;quot;) {
        Error404(w, r)
        return
    }
    http.ServeFile(w, r, r.URL.Path[1:])
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;error-pages&#34;&gt;Error Pages&lt;/h2&gt;

&lt;p&gt;You can specify the &lt;strong&gt;404&lt;/strong&gt; (Page Not Found) and &lt;strong&gt;405&lt;/strong&gt; (Method Not Allowed)
behaviors.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/blue-jay/blueprint/blob/master/controller/core/error.go&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package core

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;net/http&amp;quot;

    &amp;quot;github.com/blue-jay/blueprint/lib/router&amp;quot;
)

func LoadError() {
    router.MethodNotAllowed(Error405)
    router.NotFound(Error404)
}

// Error404 - Page Not Found
func Error404(w http.ResponseWriter, r *http.Request) {
    w.WriteHeader(http.StatusNotFound)
    fmt.Fprint(w, &amp;quot;Not Found 404&amp;quot;)
}

// Error405 - Method Not Allowed
func Error405(w http.ResponseWriter, r *http.Request) {
    w.WriteHeader(http.StatusMethodNotAllowed)
    fmt.Fprint(w, &amp;quot;Method Not Allowed 405&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Middleware</title>
      <link>http://blue-jay.github.io/middleware/</link>
      <pubDate>Mon, 20 Jun 2016 21:07:13 +0100</pubDate>
      
      <guid>http://blue-jay.github.io/middleware/</guid>
      <description>

&lt;h2 id=&#34;basic-usage&#34;&gt;Basic Usage&lt;/h2&gt;

&lt;p&gt;Middleware, in the context of Go, is applied during routing to provide
features like request/response logging, access controls lists (ACLs), and
header modification. Middleware is either applied to every request (for request
logging) or specified routes (for ACLs).&lt;/p&gt;

&lt;p&gt;There are a few pieces of middleware included. The package called csrfbanana
protects against Cross-Site Request Forgery attacks and prevents double submits.
The package httprouterwrapper provides helper functions to make funcs compatible
with httprouter. The package logrequest will log every request made against the
website to the console. The package pprofhandler enables pprof so it will work
with httprouter.&lt;/p&gt;

&lt;h2 id=&#34;creating-middleware&#34;&gt;Creating Middleware&lt;/h2&gt;

&lt;p&gt;An example of a piece of middleware that is applied to every request is
&lt;strong&gt;lib/middleware/logrequest&lt;/strong&gt;. When a page is requested, the middleware will
print to the console the time of the request, remote IP address, HTTP method,
and the URL requested.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/blue-jay/blueprint/blob/master/lib/middleware/logrequest/logrequest.go&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package logrequest

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;net/http&amp;quot;
    &amp;quot;time&amp;quot;
)

// Handler will log the HTTP requests
func Handler(next http.Handler) http.Handler {
    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        // Log the request
        fmt.Println(time.Now().Format(&amp;quot;2006-01-02 03:04:05 PM&amp;quot;), r.RemoteAddr, r.Method, r.URL)
        next.ServeHTTP(w, r)
    })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use this template for writing your own middleware:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Handler will log the HTTP requests
func Handler(next http.Handler) http.Handler {
    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        // Logic BEFORE the other handlers and function goes here
        next.ServeHTTP(w, r)
        // Logic AFTER the other handlers and function goes here
    })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;chaining&#34;&gt;Chaining&lt;/h2&gt;

&lt;p&gt;Chaining prevents middleware from stacking up which is hard to read.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;return context.ClearHandler(rest.Handler(logrequest.Handler(setUpBanana)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before &lt;a href=&#34;https://github.com/justinas/alice&#34;&gt;justinas/alice&lt;/a&gt;, a workaround was to
use the variable and reassign it multiple times like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;h = setUpBanana(h)
h = logrequest.Handler(h)
h = rest.Handler(h)
return context.ClearHandler(h)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In &lt;a href=&#34;https://github.com/blue-jay/blueprint/blob/master/controller/notepad/notepad.go&#34;&gt;controller/notepad&lt;/a&gt;,
the application uses the &lt;strong&gt;router.ChainHandler()&lt;/strong&gt; function. The function is a wrapper for
the &lt;a href=&#34;https://github.com/justinas/alice&#34;&gt;justinas/alice&lt;/a&gt; package which makes
using middleware more scalable and a little &amp;ldquo;prettier&amp;rdquo;. If you look at the
&lt;a href=&#34;https://github.com/blue-jay/blueprint/blob/master/bootstrap/bootstrap.go&#34;&gt;bootstrap&lt;/a&gt;
package, you&amp;rsquo;ll see the &lt;strong&gt;ChainHandler()&lt;/strong&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Middleware contains the middleware that applies to every request
func SetUpMiddleware(h http.Handler) http.Handler {
    return router.ChainHandler( // Chain middleware, bottom runs first
        context.ClearHandler, // Clear handler for Gorilla Context
        rest.Handler,         // Support changing HTTP method sent via form input
        logrequest.Handler,   // Log every request
        setUpBanana)          // Prevent CSRF and double submits
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is also a &lt;strong&gt;Chain()&lt;/strong&gt; function that can be used to chain middleware for routes
or to pass to &lt;strong&gt;ChainHandler()&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Apply middleware to routes individually
router.Get(&amp;quot;/notepad&amp;quot;, Index, acl.DisallowAnon, logrequest.Handler)
router.Get(&amp;quot;/notepad/create&amp;quot;, Create, acl.DisallowAnon, logrequest.Handler)

// Use Chain() to apply middleware
c := router.Chain(acl.DisallowAnon, logrequest.Handler)
router.Get(&amp;quot;/notepad&amp;quot;, Index, c...)
router.Get(&amp;quot;/notepad/create&amp;quot;, Create, c...)

// Pass Chain() to ChainHandler()
c := router.Chain( // Chain middleware, bottom runs first
    context.ClearHandler, // Clear handler for Gorilla Context
    rest.Handler,         // Support changing HTTP method sent via form input
    logrequest.Handler,   // Log every request
    setUpBanana)          // Prevent CSRF and double submits
return router.ChainHandler(c...)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ChainHandler()&lt;/strong&gt; accepts one or more of the http.Handler type and returns a
http.Handler.
&lt;strong&gt;Chain()&lt;/strong&gt; accepts one or more of the http.Handler type and returns an array of
the alice.Constructor type.&lt;/p&gt;

&lt;h2 id=&#34;apply-to-every-request&#34;&gt;Apply to Every Request&lt;/h2&gt;

&lt;p&gt;In &lt;a href=&#34;https://github.com/blue-jay/blueprint/blob/master/blueprint.go&#34;&gt;blueprint.go&lt;/a&gt;,
the application calls &lt;strong&gt;bootstrap.SetUpMiddleware(router.Instance())&lt;/strong&gt; which
applies the middleware to the router. The middleware is called on every
request.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/blue-jay/blueprint/blob/master/bootstrap/bootstrap.go&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Middleware contains the middleware that applies to every request
func SetUpMiddleware(h http.Handler) http.Handler {
    return router.ChainHandler( // Chain middleware, bottom runs first
        context.ClearHandler, // Clear handler for Gorilla Context
        rest.Handler,         // Support changing HTTP method sent via form input
        logrequest.Handler,   // Log every request
        setUpBanana)          // Prevent CSRF and double submits
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;apply-to-specific-routes&#34;&gt;Apply to Specific Routes&lt;/h2&gt;

&lt;p&gt;In &lt;a href=&#34;https://github.com/blue-jay/blueprint/blob/master/controller/notepad/notepad.go&#34;&gt;controller/notepad&lt;/a&gt;,
the application creates a chain of middleware and then
applies it to only certain routes. In this scenario, the pages are only
accessible if the user is authenticated.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/blue-jay/blueprint/blob/master/controller/notepad/notepad.go&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Load() {
    // Add middleware that disallows anonymous access
    c := router.Chain(acl.DisallowAnon)

    // Map HTTP methods and URLs to functions wrapped in the middleware chain
    router.Get(&amp;quot;/notepad&amp;quot;, Index, c...)
    router.Get(&amp;quot;/notepad/create&amp;quot;, Create, c...)
    router.Post(&amp;quot;/notepad&amp;quot;, Store, c...)
    router.Get(&amp;quot;/notepad/view/:id&amp;quot;, Show, c...)
    router.Get(&amp;quot;/notepad/edit/:id&amp;quot;, Edit, c...)
    router.Patch(&amp;quot;/notepad/edit/:id&amp;quot;, Update, c...)
    router.Delete(&amp;quot;/notepad/:id&amp;quot;, Destroy, c...)
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Controllers</title>
      <link>http://blue-jay.github.io/controllers/</link>
      <pubDate>Tue, 08 Mar 2016 21:07:13 +0100</pubDate>
      
      <guid>http://blue-jay.github.io/controllers/</guid>
      <description>

&lt;h2 id=&#34;basic-usage&#34;&gt;Basic Usage&lt;/h2&gt;

&lt;p&gt;The controller files are all organized under the &lt;strong&gt;controller&lt;/strong&gt; folder. The
controllers handle the interactions between the models and the views as well as
specify which routes to map to which functions.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a good idea to follow a naming convention for the different pieces.
Laravel developers will notice it&amp;rsquo;s the same convention Taylor Orwell uses.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Method&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Path&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Function&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;View&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;GET&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;/notepad&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Index&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;index.tmpl&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;GET&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;/notepad/create&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Create&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;create.tmpl&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;POST&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;/notepad&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Store&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;GET&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;/notepad/view/:id&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Show&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;show.tmpl&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;GET&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;/notepad/edit/:id&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Edit&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;edit.tmpl&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;PATCH&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;/notepad/edit/:id&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Update&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;DELETE&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;/notepad/:id&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;index&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For example, below is a controller that follows the naming convention. Notice
the model name (&amp;ldquo;note&amp;rdquo;) matches the view folder (&amp;ldquo;note/index&amp;rdquo;). The model does
not need to match the controller because you&amp;rsquo;ll be working with many different
models in your controllers.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Load() {
	...
	// &amp;quot;Get&amp;quot; is the Method
	// &amp;quot;/notepad&amp;quot; is the Path
	router.Get(&amp;quot;/notepad&amp;quot;, Index, acl.DisallowAnon)
	...
}

// &amp;quot;Index&amp;quot; is the Function
func Index(w http.ResponseWriter, r *http.Request) {
	c := flight.Context(w, r)

	items, err := note.ByUserID(c.UserID)
	if err != nil {
		c.FlashError(err)
		items = []note.Item{}
	}

	// &amp;quot;index&amp;quot; is the View
	v := view.New(&amp;quot;note/index&amp;quot;)
	v.Vars[&amp;quot;first_name&amp;quot;] = c.Sess.Values[&amp;quot;first_name&amp;quot;]
	v.Vars[&amp;quot;items&amp;quot;] = items
	v.Render(w, r)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;access-a-session&#34;&gt;Access a Session&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Get the current session
sess := session.Instance(r)
...
// Save the session after you are finished making changes
sess.Save(r, w)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;trigger-flash-message&#34;&gt;Trigger Flash Message&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;sess.AddFlash(view.Flash{&amp;quot;Sorry, no brute force :-)&amp;quot;, view.FlashNotice})
sess.Save(r, w) // Ensure you save the session after making a change to it
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;validate-a-form&#34;&gt;Validate a Form&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;if validate, missingField := form.Required(r, &amp;quot;email&amp;quot;, &amp;quot;password&amp;quot;); !validate {
	sess.AddFlash(flash.Info{&amp;quot;Field missing: &amp;quot; + missingField, flash.Error})
	sess.Save(r, w)
	LoginGET(w, r)
	return
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;render-a-template&#34;&gt;Render a Template&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Set the template name
v := view.New(&amp;quot;auth/login&amp;quot;)

// Refill form fields from a POST operation
form.Repopulate(r.Form, v.Vars, &amp;quot;email&amp;quot;)

// Render the template
v.Render(w, r)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;return-flash-over-ajax&#34;&gt;Return Flash over Ajax&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Get session
sess := session.Instance(r)

// Set the flash message
sess.AddFlash(view.Flash{&amp;quot;An error occurred on the server. Please try again later.&amp;quot;, view.FlashError})
sess.Save(r, w)

// Display the flash messages as JSON
v := view.New(r)
v.SendFlashes(w)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;interact-with-a-model&#34;&gt;Interact with a Model&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Get database result
result, err := user.ByEmail(email)

if err == model.ErrNoResult {
	// User does not exist
} else if err != nil {
	// Display error message
} else if passhash.MatchString(result.Password, password) {
	// Password matches!	
} else {
	// Password does not match
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;send-an-email&#34;&gt;Send an Email&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Email a user
err := email.Send(email.ReadConfig().From, &amp;quot;This is the subject&amp;quot;, &amp;quot;This is the body!&amp;quot;)
if err != nil {
    log.Println(err)
    sess.AddFlash(view.Flash{&amp;quot;An error occurred on the server. Please try again later.&amp;quot;, view.FlashError})
    sess.Save(r, w)
    return
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Models</title>
      <link>http://blue-jay.github.io/models/</link>
      <pubDate>Tue, 08 Mar 2016 21:07:13 +0100</pubDate>
      
      <guid>http://blue-jay.github.io/models/</guid>
      <description>

&lt;h2 id=&#34;basic-usage&#34;&gt;Basic Usage&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s a good idea to abstract the database layer out so if you need to make
changes, you don&amp;rsquo;t have to look through business logic to find the queries. All
the queries are stored in the &lt;strong&gt;model&lt;/strong&gt; folder.&lt;/p&gt;

&lt;p&gt;Blue Jay supports MySQL by default, but can easily be expanded to use other
database systems.&lt;/p&gt;

&lt;h2 id=&#34;connect-to-the-database&#34;&gt;Connect to the database&lt;/h2&gt;

&lt;p&gt;You only need to connect to the database once. The connection pool is
automatically handled by the &lt;a href=&#34;https://github.com/go-sql-driver/mysql&#34;&gt;go-sql-driver/mysql&lt;/a&gt;
package.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Connect to database
database.Connect(config.Database)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-an-item&#34;&gt;Create an Item&lt;/h2&gt;

&lt;p&gt;Use &lt;strong&gt;database.SQL.Exec()&lt;/strong&gt; to create an item or a table.&lt;/p&gt;

&lt;h3 id=&#34;controller&#34;&gt;Controller&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;_, err := note.Create(r.FormValue(&amp;quot;note&amp;quot;), userID)
if err != nil {
    log.Println(err)
    sess.AddFlash(flash.Info{&amp;quot;An error occurred on the server. Please try again later.&amp;quot;, flash.Error})
    sess.Save(r, w)
    Create(w, r)
    return
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;model&#34;&gt;Model&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create adds an item
func Create(content string, userID string) (sql.Result, error) {
    result, err := database.SQL.Exec(fmt.Sprintf(`
        INSERT INTO %v
        (content, user_id)
        VALUES
        (?,?)
        `, table),
        content, userID)
    return result, model.StandardError(err)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;get-an-item-by-item-id&#34;&gt;Get an Item by Item ID&lt;/h2&gt;

&lt;p&gt;Use &lt;strong&gt;database.SQL.Get()&lt;/strong&gt; to get a single item.&lt;/p&gt;

&lt;h3 id=&#34;controller-1&#34;&gt;Controller&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;item, err := note.ByID(params.ByName(&amp;quot;id&amp;quot;), userID)
if err != nil { // If the note doesn&#39;t exist
    log.Println(err)
    sess.AddFlash(flash.Info{&amp;quot;An error occurred on the server. Please try again later.&amp;quot;, flash.Error})
    sess.Save(r, w)
    http.Redirect(w, r, uri, http.StatusFound)
    return
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;model-1&#34;&gt;Model&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// ByID gets item by ID
func ByID(ID string, userID string) (Item, error) {
    result := Item{}
    err := database.SQL.Get(&amp;amp;result, fmt.Sprintf(`
        SELECT id, content, user_id, created_at, updated_at, deleted_at
        FROM %v
        WHERE id = ?
            AND user_id = ?
            AND deleted_at IS NULL
        LIMIT 1
        `, table),
        ID, userID)
    return result, model.StandardError(err)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;get-items-by-user-id&#34;&gt;Get Items by User ID&lt;/h2&gt;

&lt;p&gt;Use &lt;strong&gt;database.SQL.Select()&lt;/strong&gt; to get multiple items.&lt;/p&gt;

&lt;h3 id=&#34;controller-2&#34;&gt;Controller&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;items, err := note.ByUserID(userID)
if err != nil {
    log.Println(err)
    sess.AddFlash(flash.Info{&amp;quot;An error occurred on the server. Please try again later.&amp;quot;, flash.Error})
    sess.Save(r, w)
    items = []note.Item{}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;model-2&#34;&gt;Model&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// ByUserID gets all items for a user
func ByUserID(userID string) ([]Item, error) {
    var result []Item
    err := database.SQL.Select(&amp;amp;result, fmt.Sprintf(`
        SELECT id, content, user_id, created_at, updated_at, deleted_at
        FROM %v
        WHERE user_id = ?
            AND deleted_at IS NULL
        `, table),
        userID)
    return result, model.StandardError(err)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;update-an-item&#34;&gt;Update an Item&lt;/h2&gt;

&lt;p&gt;Use &lt;strong&gt;database.SQL.Exec()&lt;/strong&gt; to update one or more items.&lt;/p&gt;

&lt;h3 id=&#34;controller-3&#34;&gt;Controller&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;_, err := note.Update(r.FormValue(&amp;quot;note&amp;quot;), params.ByName(&amp;quot;id&amp;quot;), userID)
if err != nil {
    log.Println(err)
    sess.AddFlash(flash.Info{&amp;quot;An error occurred on the server. Please try again later.&amp;quot;, flash.Error})
    sess.Save(r, w)
    Edit(w, r)
    return
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;model-3&#34;&gt;Model&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Update makes changes to an existing item
func Update(content string, ID string, userID string) (sql.Result, error) {
    result, err := database.SQL.Exec(fmt.Sprintf(`
        UPDATE %v
        SET content = ?
        WHERE id = ?
            AND user_id = ?
            AND deleted_at IS NULL
        LIMIT 1
        `, table),
        content, ID, userID)
    return result, model.StandardError(err)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;soft-delete-an-item&#34;&gt;Soft Delete an Item&lt;/h2&gt;

&lt;p&gt;A soft delete leaves the item in the database, but marks it as deleted with a
timestamp.&lt;/p&gt;

&lt;h3 id=&#34;controller-4&#34;&gt;Controller&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;_, err := note.Delete(params.ByName(&amp;quot;id&amp;quot;), userID)
if err != nil {
    log.Println(err)
    sess.AddFlash(flash.Info{&amp;quot;An error occurred on the server. Please try again later.&amp;quot;, flash.Error})
    sess.Save(r, w)
} else {
    sess.AddFlash(flash.Info{&amp;quot;Item deleted.&amp;quot;, flash.Notice})
    sess.Save(r, w)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;model-4&#34;&gt;Model&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Delete marks an item as removed
func Delete(ID string, userID string) (sql.Result, error) {
    result, err := database.SQL.Exec(fmt.Sprintf(`
        UPDATE %v
        SET deleted_at = NOW()
        WHERE id = ?
            AND user_id = ?
            AND deleted_at IS NULL
        LIMIT 1
        `, table),
        ID, userID)
    return result, model.StandardError(err)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;hard-delete-an-item&#34;&gt;Hard Delete an Item&lt;/h2&gt;

&lt;p&gt;A hard delete removes the item from the database.&lt;/p&gt;

&lt;h3 id=&#34;controller-5&#34;&gt;Controller&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;_, err := note.DeleteHard(params.ByName(&amp;quot;id&amp;quot;), userID)
if err != nil {
    log.Println(err)
    sess.AddFlash(flash.Info{&amp;quot;An error occurred on the server. Please try again later.&amp;quot;, flash.Error})
    sess.Save(r, w)
} else {
    sess.AddFlash(flash.Info{&amp;quot;Item deleted.&amp;quot;, flash.Notice})
    sess.Save(r, w)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;model-5&#34;&gt;Model&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Delete removes an item
func DeleteHard(ID string, userID string) (sql.Result, error) {
    result, err := database.SQL.Exec(fmt.Sprintf(`
        DELETE FROM %v
        WHERE id = ?
            AND user_id = ?
            AND deleted_at IS NULL
        `, table),
        ID, userID)
    return result, model.StandardError(err)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;handling-errors&#34;&gt;Handling Errors&lt;/h2&gt;

&lt;p&gt;You can define your own errors for your models in the
&lt;a href=&#34;https://github.com/blue-jay/blueprint/blob/master/model/model.go&#34;&gt;model&lt;/a&gt;
package. This is another abstraction that makes it easy to change out database
systems without having to rewrite code in your controllers.&lt;/p&gt;

&lt;p&gt;You can manage the errors like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var (
    // ErrNoResult is when no results are found
    ErrNoResult = errors.New(&amp;quot;Result not found.&amp;quot;)
)

// StrandardError returns a model defined error
func StandardError(err error) error {
    if err == sql.ErrNoRows {
        return ErrNoResult
    }

    return err
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In your controller, you can check the error like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;if err == model.ErrNoResult {
    sess.AddFlash(flash.Info{&amp;quot;Password is incorrect&amp;quot;, flash.Warning})
    sess.Save(r, w)
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Views</title>
      <link>http://blue-jay.github.io/views/</link>
      <pubDate>Tue, 08 Mar 2016 21:07:13 +0100</pubDate>
      
      <guid>http://blue-jay.github.io/views/</guid>
      <description>

&lt;h2 id=&#34;basic-usage&#34;&gt;Basic Usage&lt;/h2&gt;

&lt;p&gt;Views contain the HTML served by your application and separate your controller / application logic from your presentation logic. The views are parsed by the &lt;a href=&#34;https://golang.org/pkg/html/template/&#34;&gt;html/template&lt;/a&gt; package.&lt;/p&gt;

&lt;p&gt;A view should include the four &lt;strong&gt;define&lt;/strong&gt; blocks (&lt;strong&gt;title&lt;/strong&gt;, &lt;strong&gt;head&lt;/strong&gt;, &lt;strong&gt;content&lt;/strong&gt;, and &lt;strong&gt;foot&lt;/strong&gt;) and may look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{define &amp;quot;title&amp;quot;}}Welcome{{end}}
{{define &amp;quot;head&amp;quot;}}{{end}}
{{define &amp;quot;content&amp;quot;}}
&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
	&amp;lt;div class=&amp;quot;page-header&amp;quot;&amp;gt;
		&amp;lt;h1&amp;gt;Hello, {{.first_name}}&amp;lt;/h1&amp;gt;
	&amp;lt;/div&amp;gt;
	&amp;lt;p&amp;gt;You have arrived. Click {{LINK &amp;quot;notepad&amp;quot; &amp;quot;here&amp;quot;}} to view your notepad.&amp;lt;/p&amp;gt;
	{{template &amp;quot;footer&amp;quot; .}}
&amp;lt;/div&amp;gt;
{{end}}
{{define &amp;quot;foot&amp;quot;}}{{end}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since this view is stored at &lt;strong&gt;view/index/auth.tmpl&lt;/strong&gt;, we may render it using the &lt;strong&gt;view&lt;/strong&gt; helper package like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// import &amp;quot;github.com/blue-jay/blueprint/lib/view&amp;quot;
v := view.New(&amp;quot;index/auth&amp;quot;)
v.Vars[&amp;quot;first_name&amp;quot;] = session.Values[&amp;quot;first_name&amp;quot;]
v.Render(w, r)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you don&amp;rsquo;t have to pass any variables to the template, you could shorten it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// import &amp;quot;github.com/blue-jay/blueprint/lib/view&amp;quot;
view.New(&amp;quot;index/auth&amp;quot;).Render(w, r)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;base-template&#34;&gt;Base Template&lt;/h2&gt;

&lt;p&gt;By default, the &lt;strong&gt;view/base.tmpl&lt;/strong&gt; template is used as the base template (as specified in env.json). If you want to
change the base template for a template, you can try this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;v := view.New(&amp;quot;index/auth&amp;quot;).Base(&amp;quot;alternate&amp;quot;)
v.Render(w, r)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A shorter way to specify the view with a different base template and then render is like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;view.New(&amp;quot;about/about&amp;quot;).Base(&amp;quot;alternate&amp;quot;).Render(w, r)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;view-package&#34;&gt;View Package&lt;/h2&gt;

&lt;p&gt;The optional &lt;strong&gt;lib/view&lt;/strong&gt; package is a wrapper for the Go &lt;a href=&#34;https://golang.org/pkg/html/template/&#34;&gt;html/template&lt;/a&gt; package
and provides the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;thread-safe template caching&lt;/li&gt;
&lt;li&gt;easy way to extend the list of functions available in templates&lt;/li&gt;
&lt;li&gt;easy way to modify the variables available in templates&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The set up of the &lt;strong&gt;view&lt;/strong&gt; package is handled by the &lt;strong&gt;bootstrap&lt;/strong&gt; package:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// import &amp;quot;github.com/blue-jay/blueprint/lib/view&amp;quot;
// Set up the views
view.SetConfig(config.View)
view.SetTemplates(config.Template.Root, config.Template.Children)

// Set up the functions for the views
view.SetFunctions(
	extend.Assets(config.View),
	extend.Link(config.View),
	extend.NoEscape(),
	extend.PrettyTime(),
)

// Set up the variables for the views
view.SetVariables(
	modify.AuthLevel,
	modify.BaseURI,
	modify.Token,
	flash.Modify,
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;organization&#34;&gt;Organization&lt;/h2&gt;

&lt;p&gt;The HTML templates are organized into folders under the &lt;strong&gt;view&lt;/strong&gt; folder:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;about/about.tmpl	- quick blurb about the app
auth/login.tmpl		- login page
auth/register.tmpl	- register page
index/anon.tmpl		- public home page
index/auth.tmpl		- home page once you login
note/create.tmpl	- create a note
note/edit.tmpl		- edit a note
note/index.tmpl		- view all notes
note/show.tmpl		- view a note
partial/footer.tmpl	- footer at the bottom of all pages
partial/menu.tmpl	- menu at the top of all pages
base.tmpl			- base template for all pages
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;included-functions&#34;&gt;Included Functions&lt;/h2&gt;

&lt;p&gt;There are a few functions that are included to make working with the templates
and static files easier:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- CSS files with timestamps --&amp;gt;
{{CSS &amp;quot;static/css/normalize3.0.0.min.css&amp;quot;}}
parses to
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;/static/css/normalize3.0.0.min.css?1435528339&amp;quot; /&amp;gt;

&amp;lt;!-- JS files with timestamps --&amp;gt;
{{JS &amp;quot;static/js/jquery1.11.0.min.js&amp;quot;}}
parses to
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;/static/js/jquery1.11.0.min.js?1435528404&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;!-- Hyperlinks --&amp;gt;
{{LINK &amp;quot;register&amp;quot; &amp;quot;Create a new account.&amp;quot;}}
parses to
&amp;lt;a href=&amp;quot;/register&amp;quot;&amp;gt;Create a new account.&amp;lt;/a&amp;gt;

&amp;lt;!-- Output an unescaped variable (not a safe idea, but it is useful when troubleshooting) --&amp;gt;
{{.SomeVariable | NOESCAPE}}

&amp;lt;!-- Time format --&amp;gt;
{{.SomeTime | PRETTYTIME}}
parses to format
3:04 PM 01/02/2006
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;included-variables&#34;&gt;Included Variables&lt;/h2&gt;

&lt;p&gt;There are a few variables you can use in templates as well:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- Use AuthLevel=auth to determine if a user is logged in (if session.Values[&amp;quot;id&amp;quot;] != nil) --&amp;gt;
{{if eq .AuthLevel &amp;quot;auth&amp;quot;}}
You are logged in.
{{else}}
You are not logged in.
{{end}}

&amp;lt;!-- Use BaseURI to print the base URL specified in the env.json file --&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{.BaseURI}}about&amp;quot;&amp;gt;About&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;

&amp;lt;!-- Use token to output the CSRF token in a form --&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;token&amp;quot; value=&amp;quot;{{.token}}&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;header-and-footer&#34;&gt;Header and Footer&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s also easy to add template-specific code before the closing &lt;/head&gt; and &lt;/body&gt; tags:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- Code is added before the closing &amp;lt;/head&amp;gt; tag --&amp;gt;
{{define &amp;quot;head&amp;quot;}}&amp;lt;meta name=&amp;quot;robots&amp;quot; content=&amp;quot;noindex&amp;quot;&amp;gt;{{end}}

...

&amp;lt;!-- Code is added before the closing &amp;lt;/body&amp;gt; tag --&amp;gt;
{{define &amp;quot;foot&amp;quot;}}{{JS &amp;quot;//www.google.com/recaptcha/api.js&amp;quot;}}{{end}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;javascript&#34;&gt;JavaScript&lt;/h2&gt;

&lt;p&gt;There are a few built-in functions that you can use to trigger a flash notification using JavaScript.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;flashError(&amp;quot;An error occurred on the server.&amp;quot;);

flashSuccess(&amp;quot;Item added!&amp;quot;);

flashNotice(&amp;quot;Item deleted.&amp;quot;);

flashWarning(&amp;quot;Field missing: email&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>