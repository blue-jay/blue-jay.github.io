<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Routings on Blue Jay</title>
    <link>http://blue-jay.github.io/routing/</link>
    <description>Recent content in Routings on Blue Jay</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 08 Mar 2016 21:07:13 +0100</lastBuildDate>
    <atom:link href="http://blue-jay.github.io/routing/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Routing</title>
      <link>http://blue-jay.github.io/routing/</link>
      <pubDate>Tue, 08 Mar 2016 21:07:13 +0100</pubDate>
      
      <guid>http://blue-jay.github.io/routing/</guid>
      <description>

&lt;h2 id=&#34;basic-usage&#34;&gt;Basic Usage&lt;/h2&gt;

&lt;p&gt;When a user requests a page from your application, the routes determine which
page is shown. The URL is mapped to a controller function. For that reason,
the routes are stored in the controller file. The controller files are all
organized under the &lt;strong&gt;controller&lt;/strong&gt; folder.&lt;/p&gt;

&lt;h2 id=&#34;routing&#34;&gt;Routing&lt;/h2&gt;

&lt;p&gt;In the &lt;strong&gt;bootstrap&lt;/strong&gt; package, the &lt;strong&gt;RegisterServices()&lt;/strong&gt; function
calls the &lt;strong&gt;controller.LoadRoutes()&lt;/strong&gt; function.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;LoadRoutes()&lt;/strong&gt; function in the &lt;strong&gt;controller&lt;/strong&gt; package loads the routes
for each of the individual controllers:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// LoadRoutes loads the routes for each of the controllers
func LoadRoutes() {
    about.Load()
    debug.Load()
    auth.LoadRegister()
    auth.LoadLogin()
    core.LoadIndex()
    core.LoadError()
    core.LoadStatic()
    notepad.Load()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the &lt;strong&gt;Load()&lt;/strong&gt; function from the &lt;strong&gt;controller/notepad&lt;/strong&gt; package:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Load() {
    // Add middleware that disallows anonymous access
    c := router.Chain(acl.DisallowAnon)

    // Map HTTP methods and URLs to functions wrapped in the middleware chain
    router.Get(&amp;quot;/notepad&amp;quot;, Index, c...)
    router.Get(&amp;quot;/notepad/create&amp;quot;, Create, c...)
    router.Post(&amp;quot;/notepad&amp;quot;, Store, c...)
    router.Get(&amp;quot;/notepad/view/:id&amp;quot;, Show, c...)
    router.Get(&amp;quot;/notepad/edit/:id&amp;quot;, Edit, c...)
    router.Patch(&amp;quot;/notepad/edit/:id&amp;quot;, Update, c...)
    router.Delete(&amp;quot;/notepad/:id&amp;quot;, Destroy, c...)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are a few things to note here. The &lt;strong&gt;router&lt;/strong&gt; references the
&lt;strong&gt;lib/router&lt;/strong&gt; package which is a wrapper for the
&lt;a href=&#34;http://github.com/julienschmidt/httprouter&#34;&gt;julienschmidt/httprouter&lt;/a&gt; package.
The &lt;strong&gt;router.Chain()&lt;/strong&gt; function uses the
&lt;a href=&#34;http://github.com/justinas/alice&#34;&gt;justinas/alice&lt;/a&gt; package
to help with middleware chaining.&lt;/p&gt;

&lt;p&gt;This is one way to build your wrapper packages that live in the &lt;strong&gt;lib&lt;/strong&gt; folder.
If you want to use a different router, you can modify the &lt;strong&gt;lib/router&lt;/strong&gt;
package easily and will only have to change a few lines of code in your
controllers.&lt;/p&gt;

&lt;h2 id=&#34;static-assets&#34;&gt;Static Assets&lt;/h2&gt;

&lt;p&gt;You can serve your &lt;strong&gt;static&lt;/strong&gt; folder with your CSS, JavaScript, and images so
they are accessible. You would access an asset like this:
&lt;code&gt;http://example.com/static/favicon.ico&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/blue-jay/blueprint/blob/master/controller/core/static.go&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package core

import (
    &amp;quot;net/http&amp;quot;
    &amp;quot;strings&amp;quot;

    &amp;quot;github.com/blue-jay/blueprint/lib/router&amp;quot;
)

func LoadStatic() {
    // Required so the trailing slash is not redirected
    router.Instance().RedirectTrailingSlash = false

    // Serve static files, no directory browsing
    router.Get(&amp;quot;/static/*filepath&amp;quot;, Static)
}

// Static maps static files
func Static(w http.ResponseWriter, r *http.Request) {
    // Disable listing directories
    if strings.HasSuffix(r.URL.Path, &amp;quot;/&amp;quot;) {
        Error404(w, r)
        return
    }
    http.ServeFile(w, r, r.URL.Path[1:])
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;error-pages&#34;&gt;Error Pages&lt;/h2&gt;

&lt;p&gt;You can specify the &lt;strong&gt;404&lt;/strong&gt; (Page Not Found) and &lt;strong&gt;405&lt;/strong&gt; (Method Not Allowed)
behaviors.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/blue-jay/blueprint/blob/master/controller/core/error.go&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package core

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;net/http&amp;quot;

    &amp;quot;github.com/blue-jay/blueprint/lib/router&amp;quot;
)

func LoadError() {
    router.MethodNotAllowed(Error405)
    router.NotFound(Error404)
}

// Error404 - Page Not Found
func Error404(w http.ResponseWriter, r *http.Request) {
    w.WriteHeader(http.StatusNotFound)
    fmt.Fprint(w, &amp;quot;Not Found 404&amp;quot;)
}

// Error405 - Method Not Allowed
func Error405(w http.ResponseWriter, r *http.Request) {
    w.WriteHeader(http.StatusMethodNotAllowed)
    fmt.Fprint(w, &amp;quot;Method Not Allowed 405&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>