<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Controllers on Blue Jay | Go Toolkit for the Web</title>
    <link>https://blue-jay.github.io/controllers/</link>
    <description>Recent content in Controllers on Blue Jay | Go Toolkit for the Web</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://blue-jay.github.io/controllers/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Controllers</title>
      <link>https://blue-jay.github.io/controllers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blue-jay.github.io/controllers/</guid>
      <description>

&lt;h2 id=&#34;basic-usage&#34;&gt;Basic Usage&lt;/h2&gt;

&lt;p&gt;The controller files are all organized under the &lt;strong&gt;controller&lt;/strong&gt; folder. The
controllers handle the interactions between the models and the views as well as
specify which routes to map to which functions.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a good idea to follow a naming convention for the different pieces.
Laravel developers will notice it&amp;rsquo;s very similar, but with a few changes.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Method&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Path&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Function&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;View&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;GET&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;/notepad&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Index&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;index.tmpl&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;GET&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;/notepad/create&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Create&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;create.tmpl&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;POST&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;/notepad/create&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Store&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;GET&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;/notepad/view/:id&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Show&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;show.tmpl&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;GET&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;/notepad/edit/:id&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Edit&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;edit.tmpl&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;PATCH&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;/notepad/edit/:id&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Update&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;DELETE&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;/notepad/:id&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Destroy&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Here is a controller that follows the naming convention. Notice
the model name (&lt;strong&gt;note&lt;/strong&gt;) matches the view folder (&lt;strong&gt;note/index&lt;/strong&gt;). The model does
not need to match the controller because you&amp;rsquo;ll be working with many different
models in your controllers.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Load() {
	...
	// &amp;quot;Get&amp;quot; is the Method
	// &amp;quot;/notepad&amp;quot; is the Path
	router.Get(&amp;quot;/notepad&amp;quot;, Index, acl.DisallowAnon)
	...
}

// Index displays the items.
func Index(w http.ResponseWriter, r *http.Request) {
	c := flight.Context(w, r)

	items, _, err := note.ByUserID(c.DB, c.UserID)
	if err != nil {
		c.FlashError(err)
		items = []note.Item{}
	}

	v := c.View.New(&amp;quot;note/index&amp;quot;)
	v.Vars[&amp;quot;items&amp;quot;] = items
	v.Render(w, r)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;access-a-session&#34;&gt;Access a Session&lt;/h2&gt;

&lt;p&gt;Sessions provide access to flash messages as well as variables that are set at
login. You &lt;strong&gt;must&lt;/strong&gt; remember to save the sessions once you make a change to
them.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Get the current session
sess, _ := session.Instance(r)
...
// Save the session after you are finished making changes
sess.Save(r, w)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;trigger-flash-message&#34;&gt;Trigger Flash Message&lt;/h2&gt;

&lt;p&gt;Flash messages will appear to the user on next page load. They only display
once. The built-in messages are tied to Bootstrap classes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;flash.Success is green (alert-success)&lt;/li&gt;
&lt;li&gt;flash.Warning is yellow (alert-warning)&lt;/li&gt;
&lt;li&gt;flash.Notice is blue (alert-info)&lt;/li&gt;
&lt;li&gt;flash.Error is red (alert-danger)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;sess.AddFlash(flash.Info{&amp;quot;Welcome to Blueprint!&amp;quot;, flash.Success})
sess.Save(r, w) // Ensure you save the session after making a change to it
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;validate-a-form&#34;&gt;Validate a Form&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;form&lt;/strong&gt; package makes it easy to validate required fields. It works on the
inputs: text, textarea, checkbox, radio, and select. The function,
&lt;strong&gt;form.Required()&lt;/strong&gt;, requires the request and then any number of fields
as it is a variadic function. You can use the &lt;code&gt;form&lt;/code&gt; package by itself it you
want more control over the error message or you can use the &lt;code&gt;flight&lt;/code&gt; package
which handles the error message for you:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Without flight
if valid, missingField := form.Required(r, &amp;quot;email&amp;quot;, &amp;quot;password&amp;quot;); !valid {
	sess.AddFlash(flash.Info{&amp;quot;Field missing: &amp;quot; + missingField, flash.Error})
	sess.Save(r, w)
	LoginGET(w, r)
	return
}

// With flight
c := flight.Context(w, r)
if !c.FormValid(&amp;quot;name&amp;quot;, &amp;quot;email&amp;quot;, &amp;quot;password&amp;quot;) {
	Create(w, r)
	return
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;repopulate-form-fields&#34;&gt;Repopulate Form Fields&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;form&lt;/strong&gt; package can also repopulate the form fields after a submission that
is missing information. It is also a
variadic function so it can accepts more than one field. You&amp;rsquo;ll need to use
blocks from the &lt;strong&gt;form&lt;/strong&gt; package in your view as well. Check out the
&lt;a href=&#34;https://blue-jay.github.io/views/#repopulate-form-fields&#34;&gt;Views&lt;/a&gt; page to see how to use them.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Without flight
c := flight.Context(w, r)
v := c.View.New(&amp;quot;note/create&amp;quot;)
form.Repopulate(r.Form, v.Vars, &amp;quot;name&amp;quot;)
v.Render(w, r)

// With flight
c := flight.Context(w, r)
v := c.View.New(&amp;quot;note/create&amp;quot;)
c.Repopulate(v.Vars, &amp;quot;name&amp;quot;)
v.Render(w, r)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;render-a-template&#34;&gt;Render a Template&lt;/h2&gt;

&lt;p&gt;You can render a template a few ways (check out the &lt;a href=&#34;https://blue-jay.github.io/views&#34;&gt;Views&lt;/a&gt;
page for more clarification):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Render without adding any variables
c := flight.Context(w, r)
c.View.New(&amp;quot;about/index&amp;quot;).Render(w, r)

// Render with variables
c := flight.Context(w, r)
v := c.View.New(&amp;quot;home/index&amp;quot;)
v.Vars[&amp;quot;first_name&amp;quot;] = c.Sess.Values[&amp;quot;first_name&amp;quot;]
v.Render(w, r)

// Render with different base template (base.tmpl is used by default)
c := flight.Context(w, r)
v := c.View.New(&amp;quot;home/index&amp;quot;).Base(&amp;quot;single&amp;quot;)
v.Render(w, r)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;return-flash-over-ajax&#34;&gt;Return Flash over Ajax&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;re using Ajax to retrieve content, you can also retrieve the flash
messages this way so they can be displayed without refreshing the page. There is
JavaScript that is already designed to show a Flash message and it&amp;rsquo;s called:
&lt;strong&gt;ShowFlash()&lt;/strong&gt;. You&amp;rsquo;ll just need to make a call to the page and then pass the
output to &lt;strong&gt;ShowFlash()&lt;/strong&gt;. The code is below.&lt;/p&gt;

&lt;p&gt;Code for the controller:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Load the routes.
func Load() {
	router.Get(&amp;quot;/flashes&amp;quot;, Index)
}

// Index displays the flash messages in JSON.
func Index(w http.ResponseWriter, r *http.Request) {
	c := flight.Context(w, r)

	// Set the flash message
	c.Sess.AddFlash(flash.Info{&amp;quot;An error occurred on the server. Please try again later.&amp;quot;, flash.Error})
	c.Sess.Save(r, w)

	// Display the flash messages as JSON
	flash.SendFlashes(w, r)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Code in JavaScript:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$.get(&amp;quot;/flashes&amp;quot;, function(data) {
	showFlash(data);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;interact-with-a-model&#34;&gt;Interact with a Model&lt;/h2&gt;

&lt;p&gt;The models contain all the SQL code so the controllers just call the model
functions to interact with the data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Get database result
result, norows, err := user.ByEmail(email)

if nowrows {
	// User does not exist
} else if err != nil {
	// Display error message
} else if passhash.MatchString(result.Password, password) {
	// Password matches!
} else {
	// Password does not match
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;send-an-email&#34;&gt;Send an Email&lt;/h2&gt;

&lt;p&gt;There is also a simple package that sends emails once the SMTP settings in
env.json point to your SMTP server.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Email a user
c := flight.Context(w, r)
err := c.Config.Email.Send(&amp;quot;This is the subject&amp;quot;, &amp;quot;This is the body!&amp;quot;)
if err != nil {
	c.FlashError(err)
	return
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>