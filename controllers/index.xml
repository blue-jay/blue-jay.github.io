<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Controllers on Blue Jay</title>
    <link>http://blue-jay.github.io/controllers/</link>
    <description>Recent content in Controllers on Blue Jay</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 08 Mar 2016 21:07:13 +0100</lastBuildDate>
    <atom:link href="http://blue-jay.github.io/controllers/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Controllers</title>
      <link>http://blue-jay.github.io/controllers/</link>
      <pubDate>Tue, 08 Mar 2016 21:07:13 +0100</pubDate>
      
      <guid>http://blue-jay.github.io/controllers/</guid>
      <description>

&lt;h2 id=&#34;basic-usage&#34;&gt;Basic Usage&lt;/h2&gt;

&lt;p&gt;The controller files are all organized under the &lt;strong&gt;controller&lt;/strong&gt; folder. The
controllers handle the interactions between the models and the views as well as
specify which routes to map to which functions.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a good idea to follow a naming convention for the different pieces.
Laravel developers will notice it&amp;rsquo;s the same convention Taylor Orwell uses.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Method&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Path&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Function&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;View&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;GET&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;/notepad&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Index&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;index.tmpl&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;GET&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;/notepad/create&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Create&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;create.tmpl&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;POST&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;/notepad&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Store&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;GET&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;/notepad/view/:id&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Show&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;show.tmpl&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;GET&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;/notepad/edit/:id&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Edit&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;edit.tmpl&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;PATCH&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;/notepad/edit/:id&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Update&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;DELETE&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;/notepad/:id&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;index&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For example, below is a controller that follows the naming convention. Notice
the model name (&amp;ldquo;note&amp;rdquo;) matches the view folder (&amp;ldquo;note/index&amp;rdquo;). The model does
not need to match the controller because you&amp;rsquo;ll be working with many different
models in your controllers.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Load() {
	...
	// &amp;quot;Get&amp;quot; is the Method
	// &amp;quot;/notepad&amp;quot; is the Path
	router.Get(&amp;quot;/notepad&amp;quot;, Index, acl.DisallowAnon)
	...
}

// &amp;quot;Index&amp;quot; is the Function
func Index(w http.ResponseWriter, r *http.Request) {
	c := flight.Context(w, r)

	items, err := note.ByUserID(c.UserID)
	if err != nil {
		c.FlashError(err)
		items = []note.Item{}
	}

	// &amp;quot;index&amp;quot; is the View
	v := view.New(&amp;quot;note/index&amp;quot;)
	v.Vars[&amp;quot;first_name&amp;quot;] = c.Sess.Values[&amp;quot;first_name&amp;quot;]
	v.Vars[&amp;quot;items&amp;quot;] = items
	v.Render(w, r)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;access-a-session&#34;&gt;Access a Session&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Get the current session
sess := session.Instance(r)
...
// Save the session after you are finished making changes
sess.Save(r, w)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;trigger-flash-message&#34;&gt;Trigger Flash Message&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;sess.AddFlash(view.Flash{&amp;quot;Sorry, no brute force :-)&amp;quot;, view.FlashNotice})
sess.Save(r, w) // Ensure you save the session after making a change to it
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;validate-a-form&#34;&gt;Validate a Form&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;if validate, missingField := form.Required(r, &amp;quot;email&amp;quot;, &amp;quot;password&amp;quot;); !validate {
	sess.AddFlash(flash.Info{&amp;quot;Field missing: &amp;quot; + missingField, flash.Error})
	sess.Save(r, w)
	LoginGET(w, r)
	return
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;render-a-template&#34;&gt;Render a Template&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Set the template name
v := view.New(&amp;quot;auth/login&amp;quot;)

// Refill form fields from a POST operation
form.Repopulate(r.Form, v.Vars, &amp;quot;email&amp;quot;)

// Render the template
v.Render(w, r)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;return-flash-over-ajax&#34;&gt;Return Flash over Ajax&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Get session
sess := session.Instance(r)

// Set the flash message
sess.AddFlash(view.Flash{&amp;quot;An error occurred on the server. Please try again later.&amp;quot;, view.FlashError})
sess.Save(r, w)

// Display the flash messages as JSON
v := view.New(r)
v.SendFlashes(w)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;interact-with-a-model&#34;&gt;Interact with a Model&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Get database result
result, err := user.ByEmail(email)

if err == model.ErrNoResult {
	// User does not exist
} else if err != nil {
	// Display error message
} else if passhash.MatchString(result.Password, password) {
	// Password matches!	
} else {
	// Password does not match
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;send-an-email&#34;&gt;Send an Email&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Email a user
err := email.Send(email.ReadConfig().From, &amp;quot;This is the subject&amp;quot;, &amp;quot;This is the body!&amp;quot;)
if err != nil {
    log.Println(err)
    sess.AddFlash(view.Flash{&amp;quot;An error occurred on the server. Please try again later.&amp;quot;, view.FlashError})
    sess.Save(r, w)
    return
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>