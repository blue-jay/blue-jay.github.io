<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Configurations on Blue Jay</title>
    <link>http://blue-jay.github.io/configuration/</link>
    <description>Recent content in Configurations on Blue Jay</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 08 Mar 2016 21:07:13 +0100</lastBuildDate>
    <atom:link href="http://blue-jay.github.io/configuration/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Configuration</title>
      <link>http://blue-jay.github.io/configuration/</link>
      <pubDate>Tue, 08 Mar 2016 21:07:13 +0100</pubDate>
      
      <guid>http://blue-jay.github.io/configuration/</guid>
      <description>

&lt;h2 id=&#34;basic-usage&#34;&gt;Basic Usage&lt;/h2&gt;

&lt;p&gt;Throughout this documentation, keep in mind everything in Blueprint is configurable.
You are not using a framework so you don&amp;rsquo;t have to follow rules. You don&amp;rsquo;t need to
use any of the components with Blueprint, but it does give you a nice foundation to
start from. If you want to use YAML instead of JSON, I recommend creating a wrapper
library in the &lt;strong&gt;lib&lt;/strong&gt; folder and then loading your env.yaml file via the &lt;strong&gt;bootstrap&lt;/strong&gt;
package.&lt;/p&gt;

&lt;p&gt;One of the first steps before using Blueprint is to create &lt;strong&gt;env.json&lt;/strong&gt;. You can make
a copy of &lt;strong&gt;env.json.example&lt;/strong&gt; and then name it &lt;strong&gt;env.json&lt;/strong&gt;. The &lt;strong&gt;env.json&lt;/strong&gt; file is a
good place to set variables for the application so you
don&amp;rsquo;t have to hardcode them. If you want to add any
of your own settings, you can add them to &lt;strong&gt;env.json&lt;/strong&gt; and update the &lt;strong&gt;Info&lt;/strong&gt; struct
in the &lt;strong&gt;bootstrap&lt;/strong&gt; package. Here is an example &lt;strong&gt;env.json&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
	&amp;quot;Database&amp;quot;: {
		&amp;quot;Type&amp;quot;: &amp;quot;MySQL&amp;quot;,
		&amp;quot;MySQL&amp;quot;: {
			&amp;quot;Username&amp;quot;: &amp;quot;root&amp;quot;,
			&amp;quot;Password&amp;quot;: &amp;quot;&amp;quot;,
			&amp;quot;Database&amp;quot;: &amp;quot;blueprint&amp;quot;,
			&amp;quot;Hostname&amp;quot;: &amp;quot;127.0.0.1&amp;quot;,
			&amp;quot;Port&amp;quot;: 3306,
			&amp;quot;Parameter&amp;quot;: &amp;quot;?parseTime=true&amp;quot;
		}
	},
	&amp;quot;Email&amp;quot;: {
		&amp;quot;Username&amp;quot;: &amp;quot;&amp;quot;,
		&amp;quot;Password&amp;quot;: &amp;quot;&amp;quot;,
		&amp;quot;Hostname&amp;quot;: &amp;quot;&amp;quot;,
		&amp;quot;Port&amp;quot;: 25,
		&amp;quot;From&amp;quot;: &amp;quot;&amp;quot;
	},
	&amp;quot;Server&amp;quot;: {
		&amp;quot;Hostname&amp;quot;: &amp;quot;&amp;quot;,
		&amp;quot;UseHTTP&amp;quot;: true,
		&amp;quot;UseHTTPS&amp;quot;: false,
		&amp;quot;RedirectToHTTPS&amp;quot;: false,
		&amp;quot;HTTPPort&amp;quot;: 80,
		&amp;quot;HTTPSPort&amp;quot;: 443,
		&amp;quot;CertFile&amp;quot;: &amp;quot;tls/server.crt&amp;quot;,
		&amp;quot;KeyFile&amp;quot;: &amp;quot;tls/server.key&amp;quot;
	},
	&amp;quot;Session&amp;quot;: {
		&amp;quot;SecretKey&amp;quot;: &amp;quot;@r4B?EThaSEh_drudR7P_hub=s#s2Pah&amp;quot;,
		&amp;quot;Name&amp;quot;: &amp;quot;sess&amp;quot;,
		&amp;quot;Options&amp;quot;: {
			&amp;quot;Path&amp;quot;: &amp;quot;/&amp;quot;,
			&amp;quot;Domain&amp;quot;: &amp;quot;&amp;quot;,
			&amp;quot;MaxAge&amp;quot;: 28800,
			&amp;quot;Secure&amp;quot;: false,
			&amp;quot;HttpOnly&amp;quot;: true
		}
	},
	&amp;quot;Template&amp;quot;: {
		&amp;quot;Root&amp;quot;: &amp;quot;base&amp;quot;,
		&amp;quot;Children&amp;quot;: [
			&amp;quot;partial/menu&amp;quot;,
			&amp;quot;partial/footer&amp;quot;
		]
	},
	&amp;quot;View&amp;quot;: {
		&amp;quot;BaseURI&amp;quot;: &amp;quot;/&amp;quot;,
		&amp;quot;Extension&amp;quot;: &amp;quot;tmpl&amp;quot;,
		&amp;quot;Folder&amp;quot;: &amp;quot;template&amp;quot;,
		&amp;quot;Caching&amp;quot;: true
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configuration-structure&#34;&gt;Configuration Structure&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;env.json&lt;/strong&gt; file contains the configuration for Blueprint. It removes the need
to hardcode any of these values and makes it easy to move Blueprint to another system
with a different set up.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;env.json&lt;/strong&gt; file is parsed and the result is stored in the &lt;strong&gt;Info&lt;/strong&gt; struct from the
&lt;strong&gt;bootstrap&lt;/strong&gt; package:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Info contains the application settings
type Info struct {
	Database database.Info   `json:&amp;quot;Database&amp;quot;`
	Email    email.SMTPInfo  `json:&amp;quot;Email&amp;quot;`
	Server   server.Server   `json:&amp;quot;Server&amp;quot;`
	Session  session.Session `json:&amp;quot;Session&amp;quot;`
	Template view.Template   `json:&amp;quot;Template&amp;quot;`
	View     view.View       `json:&amp;quot;View&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;strong&gt;Info&lt;/strong&gt; struct is simply a container that nests structs from packages in the &lt;strong&gt;lib&lt;/strong&gt; folder
that need variables configured. Here is a list mapping the JSON keys to structs:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Database	- Info struct in lib/database
Email		- SMTPInfo struct in lib/email
Server		- Server struct in lib/server
Session		- Session struct in lib/session
Template	- Template struct in lib/view
View		- View struct in lib/view
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;enable-https&#34;&gt;Enable HTTPS&lt;/h2&gt;

&lt;p&gt;To enable HTTPS:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Set &lt;strong&gt;UseHTTPS&lt;/strong&gt; to true&lt;/li&gt;
&lt;li&gt;Create a folder called &lt;strong&gt;tls&lt;/strong&gt; in the project root folder&lt;/li&gt;
&lt;li&gt;Place your own certificate and key files in the &lt;strong&gt;tls&lt;/strong&gt; folder&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you want to redirect HTTP to HTTPS, you can set &lt;strong&gt;RedirectToHTTPS&lt;/strong&gt; to true as well.&lt;/p&gt;

&lt;h2 id=&#34;tip-add-a-section&#34;&gt;Tip: Add a Section&lt;/h2&gt;

&lt;p&gt;To add a new key called &lt;strong&gt;Captcha&lt;/strong&gt;, you could do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new package in the &lt;strong&gt;lib&lt;/strong&gt; folder called &lt;strong&gt;captcha&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Create a struct called &lt;strong&gt;Info&lt;/strong&gt; in the &lt;strong&gt;lib/captcha&lt;/strong&gt; package&lt;/li&gt;
&lt;li&gt;Add the &lt;strong&gt;Captcha&lt;/strong&gt; key and any values to the &lt;strong&gt;env.json&lt;/strong&gt; file&lt;/li&gt;
&lt;li&gt;Add code to the &lt;strong&gt;RegisterServices()&lt;/strong&gt; function that passes the parsed config to the &lt;strong&gt;lib/captcha&lt;/strong&gt; package&lt;/li&gt;
&lt;li&gt;Add code to your controllers that references your &lt;strong&gt;lib/captcha&lt;/strong&gt; package&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;tip-remove-a-section&#34;&gt;Tip: Remove a Section&lt;/h2&gt;

&lt;p&gt;To remove the &lt;strong&gt;Email&lt;/strong&gt; key, you could do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Remove the &lt;strong&gt;Email&lt;/strong&gt; key and value from the &lt;strong&gt;env.json&lt;/strong&gt; file&lt;/li&gt;
&lt;li&gt;Remove the &lt;strong&gt;Email&lt;/strong&gt; nested struct from the &lt;strong&gt;Info&lt;/strong&gt; struct in the &lt;strong&gt;bootstrap&lt;/strong&gt; package&lt;/li&gt;
&lt;li&gt;Remove any code setting up the package from the &lt;strong&gt;RegisterServices()&lt;/strong&gt; function in the &lt;strong&gt;bootstrap&lt;/strong&gt; package&lt;/li&gt;
&lt;li&gt;Remove the &lt;strong&gt;lib/email&lt;/strong&gt; package from the filesystem&lt;/li&gt;
&lt;li&gt;Find any references to the &lt;strong&gt;lib/email&lt;/strong&gt; package in your code using the jay command line, &lt;code&gt;jay find &amp;quot;lib/email&amp;quot; &amp;quot;*.go&amp;quot;&lt;/code&gt;,
then delete the imports and referencing code&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>