<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Configurations on Blue Jay | Go Toolkit for the Web</title>
    <link>http://blue-jay.github.io/configuration/</link>
    <description>Recent content in Configurations on Blue Jay | Go Toolkit for the Web</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blue-jay.github.io/configuration/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Configuration</title>
      <link>http://blue-jay.github.io/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blue-jay.github.io/configuration/</guid>
      <description>

&lt;h2 id=&#34;basic-usage&#34;&gt;Basic Usage&lt;/h2&gt;

&lt;p&gt;Throughout this documentation, keep in mind everything in Blueprint is configurable.
You are not using a framework so don&amp;rsquo;t be afraid to change code. You don&amp;rsquo;t need to
use any of the components included with Blueprint, but it does give you a nice foundation to
start from. If you want to use YAML instead of JSON, it&amp;rsquo;s recommended to create a wrapper
library in the &lt;strong&gt;lib&lt;/strong&gt; folder and then load your env.yaml file via the &lt;strong&gt;boot&lt;/strong&gt;
package.&lt;/p&gt;

&lt;h2 id=&#34;jay-command-env&#34;&gt;Jay Command: env&lt;/h2&gt;

&lt;p&gt;One of the first steps before using Blueprint is to create &lt;strong&gt;env.json&lt;/strong&gt;. You can make
a copy of &lt;strong&gt;env.json.example&lt;/strong&gt; and then name it &lt;strong&gt;env.json&lt;/strong&gt;, just be sure to
generate a new &lt;strong&gt;AuthKey&lt;/strong&gt;, &lt;strong&gt;EncryptKey&lt;/strong&gt;, and &lt;strong&gt;CSRFKey&lt;/strong&gt; in the &lt;strong&gt;Session&lt;/strong&gt; section.&lt;/p&gt;

&lt;p&gt;You can also use &lt;strong&gt;jay&lt;/strong&gt; to create the env.json file with new session keys.
Just CD to the &lt;strong&gt;blueprint&lt;/strong&gt; folder and then run: &lt;code&gt;jay env make&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here are the commands you can use with &lt;code&gt;jay env&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Create a new env.json file from env.json.example with newly generated session keys
jay env make

# Show a new set of session keys that can be copied and pasted into env.json
jay env keyshow

# Generate a new set of session keys and automatically apply them to env.json
env env keyupdate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;strong&gt;env.json&lt;/strong&gt; file is a good place to set variables for the application so
you don&amp;rsquo;t have to hardcode them. If you want to add any of your own settings,
you can add them to &lt;strong&gt;env.json&lt;/strong&gt; and update the &lt;strong&gt;Info&lt;/strong&gt; struct
in the &lt;strong&gt;bootstrap&lt;/strong&gt; package. Here is an example &lt;strong&gt;env.json&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;Asset&amp;quot;:{
    &amp;quot;Folder&amp;quot;:&amp;quot;asset&amp;quot;
  },
  &amp;quot;Email&amp;quot;:{
    &amp;quot;Username&amp;quot;:&amp;quot;&amp;quot;,
    &amp;quot;Password&amp;quot;:&amp;quot;&amp;quot;,
    &amp;quot;Hostname&amp;quot;:&amp;quot;&amp;quot;,
    &amp;quot;Port&amp;quot;:25,
    &amp;quot;From&amp;quot;:&amp;quot;&amp;quot;
  },
  &amp;quot;Form&amp;quot;:{
    &amp;quot;FileStorageFolder&amp;quot;:&amp;quot;filestorage&amp;quot;
  },
  &amp;quot;Generation&amp;quot;:{
    &amp;quot;TemplateFolder&amp;quot;:&amp;quot;generate&amp;quot;
  },
  &amp;quot;MySQL&amp;quot;:{  
    &amp;quot;Username&amp;quot;:&amp;quot;root&amp;quot;,
    &amp;quot;Password&amp;quot;:&amp;quot;&amp;quot;,
    &amp;quot;Database&amp;quot;:&amp;quot;blueprint&amp;quot;,
    &amp;quot;Charset&amp;quot;:&amp;quot;utf8mb4&amp;quot;,
    &amp;quot;Collation&amp;quot;:&amp;quot;utf8mb4_unicode_ci&amp;quot;,
    &amp;quot;Hostname&amp;quot;:&amp;quot;127.0.0.1&amp;quot;,
    &amp;quot;Port&amp;quot;:3306,
    &amp;quot;Parameter&amp;quot;:&amp;quot;parseTime=true&amp;quot;,
    &amp;quot;MigrationFolder&amp;quot;:&amp;quot;migration/mysql&amp;quot;,
    &amp;quot;Extension&amp;quot;:&amp;quot;sql&amp;quot;
  },
  &amp;quot;Server&amp;quot;:{
    &amp;quot;Hostname&amp;quot;:&amp;quot;&amp;quot;,
    &amp;quot;UseHTTP&amp;quot;:true,
    &amp;quot;UseHTTPS&amp;quot;:false,
    &amp;quot;RedirectToHTTPS&amp;quot;:false,
    &amp;quot;HTTPPort&amp;quot;:80,
    &amp;quot;HTTPSPort&amp;quot;:443,
    &amp;quot;CertFile&amp;quot;:&amp;quot;tls/server.crt&amp;quot;,
    &amp;quot;KeyFile&amp;quot;:&amp;quot;tls/server.key&amp;quot;
  },
  &amp;quot;Session&amp;quot;:{
    &amp;quot;AuthKey&amp;quot;:&amp;quot;PzCh6FNAB7/jhmlUQ0+25sjJ+WgcJeKR2bAOtnh9UnfVN+WJSBvY/YC80Rs+rbMtwfmSP4FUSxKPtpYKzKFqFA==&amp;quot;,
    &amp;quot;EncryptKey&amp;quot;:&amp;quot;3oTKCcKjDHMUlV+qur2Ve664SPpSuviyGQ/UqnroUD8=&amp;quot;,
  &amp;quot;CSRFKey&amp;quot;:&amp;quot;xULAGF5FcWvqHsXaovNFJYfgCt6pedRPROqNvsZjU18=&amp;quot;,
    &amp;quot;Name&amp;quot;:&amp;quot;sess&amp;quot;,
    &amp;quot;Options&amp;quot;:{  
      &amp;quot;Path&amp;quot;:&amp;quot;/&amp;quot;,
      &amp;quot;Domain&amp;quot;:&amp;quot;&amp;quot;,
      &amp;quot;MaxAge&amp;quot;:28800,
      &amp;quot;Secure&amp;quot;:false,
      &amp;quot;HttpOnly&amp;quot;:true
    }
  },
  &amp;quot;Template&amp;quot;:{
    &amp;quot;Root&amp;quot;:&amp;quot;base&amp;quot;,
    &amp;quot;Children&amp;quot;:[
      &amp;quot;partial/favicon&amp;quot;,
    &amp;quot;partial/menu&amp;quot;,
      &amp;quot;partial/footer&amp;quot;
    ]
  },
  &amp;quot;View&amp;quot;:{
    &amp;quot;BaseURI&amp;quot;:&amp;quot;/&amp;quot;,
    &amp;quot;Extension&amp;quot;:&amp;quot;tmpl&amp;quot;,
    &amp;quot;Folder&amp;quot;:&amp;quot;view&amp;quot;,
    &amp;quot;Caching&amp;quot;:true
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;production&#34;&gt;Production&lt;/h2&gt;

&lt;p&gt;When you move your application to production, you should make the following
changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set &lt;strong&gt;Server&lt;/strong&gt;.&lt;strong&gt;Hostname&lt;/strong&gt; to the server&lt;/li&gt;
&lt;li&gt;Set &lt;strong&gt;Server&lt;/strong&gt;.&lt;strong&gt;UseHTTPS&lt;/strong&gt; to true&lt;/li&gt;
&lt;li&gt;Generate a certificate and key for HTTPS and place in the &lt;strong&gt;tls&lt;/strong&gt; folder&lt;/li&gt;
&lt;li&gt;Set &lt;strong&gt;Session&lt;/strong&gt;.&lt;strong&gt;Secure&lt;/strong&gt; to true&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;configuration-structure&#34;&gt;Configuration Structure&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;env.json&lt;/strong&gt; file contains the configuration for Blueprint and Jay. It removes the need
to hardcode any of these values and makes it easy to move Blueprint to another system
with a different setup. The &lt;strong&gt;env.json&lt;/strong&gt; file is parsed and held in the
&lt;strong&gt;Info&lt;/strong&gt; struct from the &lt;strong&gt;boot&lt;/strong&gt; package:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Info contains the application settings.
type Info struct {
  Asset      asset.Info    `json:&amp;quot;Asset&amp;quot;`
  Email      email.Info    `json:&amp;quot;Email&amp;quot;`
  Form       form.Info     `json:&amp;quot;Form&amp;quot;`
  Generation generate.Info `json:&amp;quot;Generation&amp;quot;`
  MySQL      mysql.Info    `json:&amp;quot;MySQL&amp;quot;`
  Server     server.Info   `json:&amp;quot;Server&amp;quot;`
  Session    session.Info  `json:&amp;quot;Session&amp;quot;`
  Template   view.Template `json:&amp;quot;Template&amp;quot;`
  View       view.Info     `json:&amp;quot;View&amp;quot;`
  Path       string
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;strong&gt;Info&lt;/strong&gt; struct is simply a container that nests structs from packages in
the &lt;strong&gt;Core&lt;/strong&gt; library that need variables configured. The &lt;strong&gt;Path&lt;/strong&gt; variable is
the location of the env.json file. Here is a list mapping the JSON keys to
structs:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Asset     - Info struct in core/asset
Email     - Info struct in core/email
Form      - Info struct in core/form
Generate  - Info struct in core/generate
MySQL     - Info struct in core/mysql
Server    - Info struct in core/server
Session   - Info struct in core/session
Template  - Template struct in lib/view
View      - Info struct in core/view
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;enable-https&#34;&gt;Enable HTTPS&lt;/h2&gt;

&lt;p&gt;To enable HTTPS:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Set &lt;strong&gt;UseHTTPS&lt;/strong&gt; to &lt;strong&gt;true&lt;/strong&gt; in the &lt;strong&gt;env.json&lt;/strong&gt; file&lt;/li&gt;
&lt;li&gt;Create a folder called &lt;strong&gt;tls&lt;/strong&gt; in the project root folder&lt;/li&gt;
&lt;li&gt;Place your own certificate and key files in the &lt;strong&gt;tls&lt;/strong&gt; folder&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you want to redirect HTTP to HTTPS, you can set &lt;strong&gt;RedirectToHTTPS&lt;/strong&gt; to &lt;strong&gt;true&lt;/strong&gt; in the &lt;strong&gt;env.json&lt;/strong&gt; file as well.&lt;/p&gt;

&lt;h2 id=&#34;tip-add-a-section&#34;&gt;Tip: Add a Section&lt;/h2&gt;

&lt;p&gt;To add a new key called &lt;strong&gt;Captcha&lt;/strong&gt;, your workflow would consist of the
following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new package in the &lt;strong&gt;lib&lt;/strong&gt; folder called &lt;strong&gt;captcha&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Create a struct called &lt;strong&gt;Info&lt;/strong&gt; in the &lt;strong&gt;lib/captcha&lt;/strong&gt; package&lt;/li&gt;
&lt;li&gt;Add the &lt;strong&gt;Captcha&lt;/strong&gt; key and any values to the &lt;strong&gt;env.json&lt;/strong&gt; file&lt;/li&gt;
&lt;li&gt;Add code to the &lt;strong&gt;RegisterServices()&lt;/strong&gt; function in the &lt;strong&gt;boot&lt;/strong&gt; package to pass the config to the &lt;strong&gt;lib/captcha&lt;/strong&gt; package at start up&lt;/li&gt;
&lt;li&gt;Add code to your controllers that references your &lt;strong&gt;lib/captcha&lt;/strong&gt; package&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;tip-remove-a-section&#34;&gt;Tip: Remove a Section&lt;/h2&gt;

&lt;p&gt;To remove the &lt;strong&gt;Email&lt;/strong&gt; key, your workflow would consist of the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Remove the &lt;strong&gt;Email&lt;/strong&gt; key and value from the &lt;strong&gt;env.json&lt;/strong&gt; file&lt;/li&gt;
&lt;li&gt;Remove the &lt;strong&gt;Email&lt;/strong&gt; nested struct from the &lt;strong&gt;Info&lt;/strong&gt; struct in the &lt;strong&gt;boot&lt;/strong&gt; package&lt;/li&gt;
&lt;li&gt;Remove any code setting up the package from the &lt;strong&gt;RegisterServices()&lt;/strong&gt; function in the &lt;strong&gt;boot&lt;/strong&gt; package&lt;/li&gt;
&lt;li&gt;Remove the &lt;strong&gt;lib/email&lt;/strong&gt; package from the filesystem&lt;/li&gt;
&lt;li&gt;Find any references to the &lt;strong&gt;lib/email&lt;/strong&gt; package in your code using the jay command line, &lt;code&gt;jay find . &amp;quot;lib/email&amp;quot;&lt;/code&gt;,
then delete the imports and referencing code&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>