<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Models on Blue Jay | Go Toolkit for the Web</title>
    <link>https://blue-jay.github.io/models/</link>
    <description>Recent content in Models on Blue Jay | Go Toolkit for the Web</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://blue-jay.github.io/models/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Models</title>
      <link>https://blue-jay.github.io/models/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blue-jay.github.io/models/</guid>
      <description>

&lt;h2 id=&#34;basic-usage&#34;&gt;Basic Usage&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s a good idea to abstract the database layer out so if you need to make
changes, you don&amp;rsquo;t have to look through the controllers to find the queries. All
the queries are stored in the &lt;strong&gt;model&lt;/strong&gt; folder.&lt;/p&gt;

&lt;p&gt;Blue Jay supports MySQL by default, but can easily be expanded to use other
database systems. There is also a PostgreSQL package you can use
&lt;a href=&#34;https://github.com/blue-jay/core/blob/master/storage/driver/postgresql/postgresql.go&#34;&gt;here&lt;/a&gt;.
The instructions are at the bottom of this page.&lt;/p&gt;

&lt;h2 id=&#34;connect-to-the-database&#34;&gt;Connect to the database&lt;/h2&gt;

&lt;p&gt;You only need to connect to the database once. The connection pool is
handled by the &lt;a href=&#34;https://github.com/go-sql-driver/mysql&#34;&gt;go-sql-driver/mysql&lt;/a&gt;
package. The connection is started by the &lt;strong&gt;lib/boot&lt;/strong&gt; package:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/blue-jay/blueprint/blob/master/lib/boot/boot.go&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Connect to the MySQL database
mysqlDB, _ := config.MySQL.Connect(true)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;model-layout&#34;&gt;Model Layout&lt;/h2&gt;

&lt;p&gt;Every model should have a table name, a struct to represent the columns, and a
Connection interface. The interface makes the model much more testable so it can
be easily mocked and interchanged.&lt;/p&gt;

&lt;p&gt;A good interface for each model looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Connection is an interface for making queries.
type Connection interface {
    Exec(query string, args ...interface{}) (sql.Result, error)
    Get(dest interface{}, query string, args ...interface{}) error
    Select(dest interface{}, query string, args ...interface{}) error
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And a good create function looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Create adds an item.
func Create(db Connection, name string, userID string) (sql.Result, error) {
    result, err := db.Exec(fmt.Sprintf(`
        INSERT INTO %v
        (name, user_id)
        VALUES
        (?,?)
        `, table),
        name, userID)
    return result, err
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;crud-operations&#34;&gt;CRUD Operations&lt;/h1&gt;

&lt;p&gt;Below are common operations and how controllers can interact with models.
All the controller functions are from
&lt;a href=&#34;https://github.com/blue-jay/blueprint/blob/master/controller/notepad/notepad.go&#34;&gt;notepad.go&lt;/a&gt;
and the model functions
are from &lt;a href=&#34;https://github.com/blue-jay/blueprint/blob/master/model/note/note.go&#34;&gt;note.go&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-an-item&#34;&gt;Create an Item&lt;/h2&gt;

&lt;p&gt;Use &lt;strong&gt;db.Exec()&lt;/strong&gt; to create an item or a table.&lt;/p&gt;

&lt;h3 id=&#34;controller&#34;&gt;Controller&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Store handles the create form submission.
func Store(w http.ResponseWriter, r *http.Request) {
    c := flight.Context(w, r)

    if !c.FormValid(&amp;quot;name&amp;quot;) {
        Create(w, r)
        return
    }

    _, err := note.Create(c.DB, r.FormValue(&amp;quot;name&amp;quot;), c.UserID)
    if err != nil {
        c.FlashError(err)
        Create(w, r)
        return
    }

    c.FlashSuccess(&amp;quot;Item added.&amp;quot;)
    c.Redirect(uri)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;model&#34;&gt;Model&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create adds an item.
func Create(db Connection, name string, userID string) (sql.Result, error) {
    result, err := db.Exec(fmt.Sprintf(`
        INSERT INTO %v
        (name, user_id)
        VALUES
        (?,?)
        `, table),
        name, userID)
    return result, err
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;get-an-item-by-item-id&#34;&gt;Get an Item by Item ID&lt;/h2&gt;

&lt;p&gt;Use &lt;strong&gt;db.Get()&lt;/strong&gt; to get a single item.&lt;/p&gt;

&lt;h3 id=&#34;controller-1&#34;&gt;Controller&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Show displays a single item.
func Show(w http.ResponseWriter, r *http.Request) {
    c := flight.Context(w, r)

    item, _, err := note.ByID(c.DB, c.Param(&amp;quot;id&amp;quot;), c.UserID)
    if err != nil {
        c.FlashError(err)
        c.Redirect(uri)
        return
    }

    v := c.View.New(&amp;quot;note/show&amp;quot;)
    v.Vars[&amp;quot;item&amp;quot;] = item
    v.Render(w, r)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;model-1&#34;&gt;Model&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// ByID gets item by ID.
func ByID(db Connection, ID string, userID string) (Item, bool, error) {
    result := Item{}
    err := db.Get(&amp;amp;result, fmt.Sprintf(`
        SELECT id, name, user_id, created_at, updated_at, deleted_at
        FROM %v
        WHERE id = ?
            AND user_id = ?
            AND deleted_at IS NULL
        LIMIT 1
        `, table),
        ID, userID)
    return result, err == sql.ErrNoRows, err
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;get-items-by-user-id&#34;&gt;Get Items by User ID&lt;/h2&gt;

&lt;p&gt;Use &lt;strong&gt;db.Select()&lt;/strong&gt; to get multiple items.&lt;/p&gt;

&lt;h3 id=&#34;controller-2&#34;&gt;Controller&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Index displays the items.
func Index(w http.ResponseWriter, r *http.Request) {
    c := flight.Context(w, r)

    items, _, err := note.ByUserID(c.DB, c.UserID)
    if err != nil {
        c.FlashError(err)
        items = []note.Item{}
    }

    v := c.View.New(&amp;quot;note/index&amp;quot;)
    v.Vars[&amp;quot;items&amp;quot;] = items
    v.Render(w, r)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;model-2&#34;&gt;Model&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// ByUserID gets all entities for a user.
func ByUserID(db Connection, userID string) ([]Item, bool, error) {
    var result []Item
    err := db.Select(&amp;amp;result, fmt.Sprintf(`
        SELECT id, name, user_id, created_at, updated_at, deleted_at
        FROM %v
        WHERE user_id = ?
            AND deleted_at IS NULL
        `, table),
        userID)
    return result, err == sql.ErrNoRows, err
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;update-an-item&#34;&gt;Update an Item&lt;/h2&gt;

&lt;p&gt;Use &lt;strong&gt;db.Exec()&lt;/strong&gt; to update one or more items.&lt;/p&gt;

&lt;h3 id=&#34;controller-3&#34;&gt;Controller&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Update handles the edit form submission.
func Update(w http.ResponseWriter, r *http.Request) {
    c := flight.Context(w, r)

    if !c.FormValid(&amp;quot;name&amp;quot;) {
        Edit(w, r)
        return
    }

    _, err := note.Update(c.DB, r.FormValue(&amp;quot;name&amp;quot;), c.Param(&amp;quot;id&amp;quot;), c.UserID)
    if err != nil {
        c.FlashError(err)
        Edit(w, r)
        return
    }

    c.FlashSuccess(&amp;quot;Item updated.&amp;quot;)
    c.Redirect(uri)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;model-3&#34;&gt;Model&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Update makes changes to an existing item.
func Update(db Connection, name string, ID string, userID string) (sql.Result, error) {
    result, err := db.Exec(fmt.Sprintf(`
        UPDATE %v
        SET name = ?
        WHERE id = ?
            AND user_id = ?
            AND deleted_at IS NULL
        LIMIT 1
        `, table),
        name, ID, userID)
    return result, err
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;soft-delete-an-item&#34;&gt;Soft Delete an Item&lt;/h2&gt;

&lt;p&gt;A soft delete leaves the item in the database, but marks it as deleted with a
timestamp.&lt;/p&gt;

&lt;h3 id=&#34;controller-4&#34;&gt;Controller&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Destroy handles the delete form submission.
func Destroy(w http.ResponseWriter, r *http.Request) {
    c := flight.Context(w, r)

    _, err := note.DeleteSoft(c.DB, c.Param(&amp;quot;id&amp;quot;), c.UserID)
    if err != nil {
        c.FlashError(err)
    } else {
        c.FlashNotice(&amp;quot;Item deleted.&amp;quot;)
    }

    c.Redirect(uri)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;model-4&#34;&gt;Model&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Delete marks an item as removed.
func DeleteSoft(db Connection, ID string, userID string) (sql.Result, error) {
    result, err := db.Exec(fmt.Sprintf(`
        UPDATE %v
        SET deleted_at = NOW()
        WHERE id = ?
            AND user_id = ?
            AND deleted_at IS NULL
        LIMIT 1
        `, table),
        ID, userID)
    return result, err
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;hard-delete-an-item&#34;&gt;Hard Delete an Item&lt;/h2&gt;

&lt;p&gt;A hard delete removes the item from the database.&lt;/p&gt;

&lt;h3 id=&#34;controller-5&#34;&gt;Controller&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Destroy handles the delete form submission.
func Destroy(w http.ResponseWriter, r *http.Request) {
    c := flight.Context(w, r)

    _, err := note.DeleteHard(c.DB, c.Param(&amp;quot;id&amp;quot;), c.UserID)
    if err != nil {
        c.FlashError(err)
    } else {
        c.FlashNotice(&amp;quot;Item deleted.&amp;quot;)
    }

    c.Redirect(uri)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;model-5&#34;&gt;Model&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// DeleteHard removes an item.
func DeleteHard(db Connection, ID string, userID string) (sql.Result, error) {
    result, err := db.Exec(fmt.Sprintf(`
        DELETE FROM %v
        WHERE id = ?
            AND user_id = ?
            AND deleted_at IS NULL
        `, table),
        ID, userID)
    return result, err
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;postgresql-support&#34;&gt;PostgreSQL Support&lt;/h2&gt;

&lt;p&gt;To use PostgreSQL, you need to a few lines of code. The migration support is
not built into &lt;a href=&#34;https://github.com/blue-jay/jay&#34;&gt;Jay&lt;/a&gt; yet so you&amp;rsquo;ll have to run
them manually.&lt;/p&gt;

&lt;p&gt;Add the PostgreSQL structure to the env.json.example file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;PostgreSQL&amp;quot;:{
    &amp;quot;Username&amp;quot;:&amp;quot;root&amp;quot;,
    &amp;quot;Password&amp;quot;:&amp;quot;&amp;quot;,
    &amp;quot;Database&amp;quot;:&amp;quot;blueprint&amp;quot;,
    &amp;quot;Hostname&amp;quot;:&amp;quot;127.0.0.1&amp;quot;,
    &amp;quot;Port&amp;quot;:5432,
    &amp;quot;Parameter&amp;quot;:&amp;quot;&amp;quot;,
    &amp;quot;MigrationFolder&amp;quot;:&amp;quot;migration/postgresql&amp;quot;,
    &amp;quot;Extension&amp;quot;:&amp;quot;sql&amp;quot;
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ensure the JSON is readable by to the &lt;strong&gt;Info&lt;/strong&gt; struct in &lt;strong&gt;lib/env&lt;/strong&gt; so add this
line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;PostgreSQL postgresql.Info `json:&amp;quot;PostgreSQL&amp;quot;`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add these lines to the &lt;strong&gt;RegisterServices()&lt;/strong&gt; function in &lt;strong&gt;lib/boot&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Connect to the PostgreSQL database
postgresqldb, _ := config.PostgreSQL.Connect(true)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to replace MySQL, you can change the line at the bottom of the
&lt;strong&gt;RegisterServices()&lt;/strong&gt; function in &lt;strong&gt;lib/boot&lt;/strong&gt; to pass PostgreSQL instead of
MySQL:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Store the database connection in flight
flight.StoreDB(postgresqldb)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to add instead of replacing MySQL, you need to:
- Add a new function to the &lt;strong&gt;lib/flight&lt;/strong&gt; package similar to &lt;strong&gt;StoreDB()&lt;/strong&gt;
- And a new line to the &lt;strong&gt;Info&lt;/strong&gt; struct in the &lt;strong&gt;lib/flight&lt;/strong&gt;
- Add the new variable to the &lt;strong&gt;Context()&lt;/strong&gt; function in &lt;strong&gt;lib/flight&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>